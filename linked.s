




; boot.s
; there is no need to load the kernel high at boot
; dme has no awkward io mappings in low memory
; so:
; - we will load it at 0x0 at map it high
; - then jump into the high mapping

; boot.s will setup the address space for the scheduler context
; which will be mapped to ptb 0

; this code is linked at 0x8000 so it works when paging is on
	.code 0x8000


; map the first 15 physical pages to second half of address space (l 0x8000 to p 0x0 etc)
	ldi bp, 15 ; cntr
	ldi r1, -1 ; one less because loop contains add 1
	ldi r2, 15 ; one less because loop contains add 1; pg 16 = 0x8000

mappages_boot:
	addi r2, r2, 1
	addi r1, r1, 1

	shl r3, r1, 8
	ldi r4, 3
	or r3, r3, r4
	wpte r2, r3
	addskpi.z bp, bp, -1
	br mappages_boot

	; map physical p31 to end of address space p31/0xf800
	ldi r1, 31
	ld16 r2, 0xf03
	wpte r1, r2

	; id map first page or execution stop after paging is enabled
	ldi r3, 3
	wpte r0, r3

	; set ptb to address space 0
	wptb r0

	; turn on paging
	lcr r1
	ori r1, r1, 4
	wcr r1
; setup IVEC
	la16 r1, _alltraps
	wivec r1

; setup SP
	la16 r1, 0xff00
	mov sp, r1

; jump into c
	la16 r2, _kmain

; setup return address in case kmain returns (it shouldn't)
	addi r1, pc, 2
	br.r r2
	hlt











;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _kprintfold
;	.code
_kprintfold:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	stw	-2(bp),r0
	la16	r4,L3_console
	br.r r4
L2_console:
	ldw	r4,-2(bp)
	ldw	r3,4(bp)
	add	r4,r4,r3
	ldb	r4,r0(r4)
	sext	r4,r4
	push	r4
	la16	r4,_putc
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	ldw	r4,-2(bp)
	addi	r4,r4,1
	stw	-2(bp),r4
L3_console:
	ldw	r4,-2(bp)
	ldw	r3,4(bp)
	add	r4,r4,r3
	ldb	r4,r0(r4)
	sext	r4,r4
	skip.eq r4,r0
	br L2_console
L1_console:
	mov	sp, bp
	pop	bp
	pop	pc

	.data 0x1000
L6_console:
	defb 48
	defb 49
	defb 50
	defb 51
	defb 52
	defb 53
	defb 54
	defb 55
	defb 56
	defb 57
	defb 97
	defb 98
	defb 99
	defb 100
	defb 101
	defb 102
	defb 0
;	.code
_printint:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 28
	sub	sp, sp, r4
	ldw	r3,8(bp)
	skip.ne	r3,r0
	br	L7_console
	ldw	r3,4(bp)
	skip.lt r3, r0
	br L1_console0
	ld16	r4, 1
	stw	-22(bp),r4
	la16	r4,L1_console1
	br.r r4
L1_console0:
	stw	-22(bp),r0
L1_console1:
	ldw	r4,-22(bp)
	stw	8(bp),r4
	skip.ne	r4,r0
	br	L7_console
	ldw	r4,4(bp)
sub	r4,r0,r4
	stw	-4(bp),r4
	la16	r4,L8_console
	br.r r4
L7_console:
	ldw	r4,4(bp)
	stw	-4(bp),r4
L8_console:
	stw	-2(bp),r0
L1_console2:
	ldw	r4,-2(bp)
	addi	r3,r4,1
	stw	-2(bp),r3
	ldi	r3, -20
	add	r3, r3, bp
	add	r4,r4,r3
	stw	-28(bp),r4
	ldw	r3,-4(bp)
	stw	-24(bp),r3
	ldw	r2,6(bp)
	stw	-26(bp),r2

push r3
push r2
ldi r2, 6
add r1, pc, r2
la16 r2, _mod
br.r r2
; result will be in r1

	la16	r4,L6_console
	add	r4,r1,r4
	ldb	r4,r0(r4)
	ldw	r3,-28(bp)
	stb	r0(r3),r4
L1_console3:
	ldw	r4,-4(bp)
	ldw	r3,6(bp)

push r4
push r3
ldi r2, 6
add r1, pc, r2
la16 r2, _div
br.r r2
; result will be in r1

	stw	-4(bp),r1
	skip.eq r1,r0
	br L1_console2
	ldw	r4,8(bp)
	skip.ne	r4,r0
	br	L1_console8
	ldw	r4,-2(bp)
	addi	r3,r4,1
	stw	-2(bp),r3
	ldi	r3, -20
	add	r3, r3, bp
	add	r4,r4,r3
	ld16	r3, 45
	stb	r0(r4),r3
	la16	r4,L1_console8
	br.r r4
L1_console7:
	ldw	r4,-2(bp)
	ldi	r3, -20
	add	r3, r3, bp
	add	r4,r4,r3
	ldb	r4,r0(r4)
	sext	r4,r4
	push	r4
	la16	r4,_putc
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L1_console8:
	ldw	r4,-2(bp)
	subi	r4,r4,1
	stw	-2(bp),r4
	skip.lt r4, r0
	br L1_console7
L5_console:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _kprintf
_kprintf:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 8
	sub	sp, sp, r4
	ldi	r4, 6
	add	r4, r4, bp
	stw	-8(bp),r4
	stw	-6(bp),r0
	la16	r4,L2_console5
	br.r r4
L2_console2:
	ldw	r4,-2(bp)
	ld16	r3, 37
	skip.ne	r4,r3
	br	L2_console6
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_putc
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,L2_console3
	br.r r4
L2_console6:
	ldw	r4,-6(bp)
	addi	r4,r4,1
	stw	-6(bp),r4
	ldw	r3,4(bp)
	add	r4,r4,r3
	ldb	r4,r0(r4)
	sext	r4,r4
	ld16	r3, 255
	and	r4,r4,r3
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	skip.eq r4,r0
	br L2_console8
	la16	r4,L2_console4
	br.r r4
L2_console8:
	ldw	r4,-2(bp)
	ld16	r3, 104
	skip.ne	r4,r3
	br	L3_console3
	skip.lte	r4,r3
	br	L44_console
L43_console:
	ldw	r4,-2(bp)
	ld16	r3, 37
	skip.ne	r4,r3
	br	L42_console
	skip.gte	r4,r3
	br	L3_console0
L45_console:
	ldw	r4,-2(bp)
	ld16	r3, 100
	skip.ne	r4,r3
	br	L3_console2
	la16	r4,L3_console0
	br.r r4
L44_console:
	ldw	r4,-2(bp)
	ld16	r3, 112
	skip.ne	r4,r3
	br	L3_console3
	ld16	r2, 115
	skip.ne	r4,r2
	br	L3_console4
	skip.gte	r4,r3
	br	L3_console0
L46_console:
	ldw	r4,-2(bp)
	ld16	r3, 120
	skip.ne	r4,r3
	br	L3_console3
	la16	r4,L3_console0
	br.r r4
L3_console2:
	ld16	r4, 1
	push	r4
	ld16	r4, 10
	push	r4
	ldw	r4,-8(bp)
	addi	r3,r4,2
	stw	-8(bp),r3
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_printint
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	la16	r4,L3_console1
	br.r r4
L3_console3:
	push	r0
	ld16	r4, 16
	push	r4
	ldw	r4,-8(bp)
	addi	r3,r4,2
	stw	-8(bp),r3
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_printint
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	la16	r4,L3_console1
	br.r r4
L3_console4:
	ldw	r4,-8(bp)
	addi	r3,r4,2
	stw	-8(bp),r3
	ldw	r4,r0(r4)
	stw	-4(bp),r4
	skip.eq r4,r0
	br L41_console
	la16	r4,L3_console7
	stw	-4(bp),r4
	la16	r4,L41_console
	br.r r4
L3_console8:
	ldw	r4,-4(bp)
	ldb	r4,r0(r4)
	sext	r4,r4
	push	r4
	la16	r4,_putc
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L3_console9:
	ldw	r4,-4(bp)
	addi	r4,r4,1
	stw	-4(bp),r4
L41_console:
	ldw	r4,-4(bp)
	ldb	r4,r0(r4)
	sext	r4,r4
	skip.eq r4,r0
	br L3_console8
	la16	r4,L3_console1
	br.r r4
L42_console:
	ld16	r4, 37
	push	r4
	la16	r4,_putc
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,L3_console1
	br.r r4
L3_console0:
	ld16	r4, 37
	push	r4
	la16	r4,_putc
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_putc
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L3_console1:
L2_console3:
	ldw	r4,-6(bp)
	addi	r4,r4,1
	stw	-6(bp),r4
L2_console5:
	ldw	r4,-6(bp)
	ldw	r3,4(bp)
	add	r4,r4,r3
	ldb	r4,r0(r4)
	sext	r4,r4
	ld16	r3, 255
	and	r4,r4,r3
	stw	-2(bp),r4
	skip.eq r4,r0
	br L2_console2
L2_console4:
L2_console0:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _putc
	.data
L3_console7:
	defb 40
	defb 110
	defb 117
	defb 108
	defb 108
	defb 41
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _strcmp
;	.code
_strcmp:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,L3_common
	br.r r4
L2_common:
	ldw	r4,8(bp)
	subi	r4,r4,1
	stw	8(bp),r4
	ld16	r4, 1
	ldw	r3,4(bp)
	add	r3,r3,r4
	stw	4(bp),r3
	ldw	r3,6(bp)
	add	r4,r3,r4
	stw	6(bp),r4
L3_common:
	ldw	r4,8(bp)
	skip.ne	r4,r0
	br	L6_common
	ldw	r4,4(bp)
	ldb	r4,r0(r4)
	sext	r4,r4
	skip.ne	r4,r0
	br	L6_common
	ldw	r3,6(bp)
	ldb	r3,r0(r3)
	sext	r3,r3
	skip.ne	r4,r3
	br	L2_common
L6_common:
	ldw	r4,8(bp)
	skip.eq r4,r0
	br L7_common
	mov	r1,r0
	la16	r4,L1_common
	br.r r4
L7_common:
	ldw	r4,4(bp)
	ldb	r4,r0(r4)
	sext	r4,r4
	ldw	r3,6(bp)
	ldb	r3,r0(r3)
	sext	r3,r3
	sub	r1,r4,r3
L1_common:
	mov	sp, bp
	pop	bp
	pop	pc

;	.end


_putc:
	; satisfy calling convention
	push r1
	push bp
	mov bp, sp
	; setup a pointer to uart reg at 0xff90
	la16 r4, 0xff90

	; wait until tx is free
check_tx_free_uart:
	ldi r1, 5
	add r1, r1, r4
	ldw r1, r0(r1)
	ldi r2, 0x60
	and r1, r1, r2
	skip.eq r2, r1
	br check_tx_free_uart
	; tx is free, load char (SP+2) and write to UART
	addi r1, bp, 4
	ldw r3, r0(r1)
	stb r0(r4), r3
	pop	bp
	pop	pc


_inituart:
	push r1
	push bp
	la16 r1, 0xff90
	mov r5, r1
	mov r1, r0
	stw 1(bp), r1   ; port + 1 0x00 - disable all interrupts
	ldi r1, 0x80
	stw 3(bp), r1   ; port + 3 0x80 enable dlab
	ldi r1, 52
	stw 0(bp), r1		; port + 0 set divisor to 1 LSB
	ldi r1, 0
	stw 1(bp), r1		; port + 1 set divisor to 1 MSB
	ldi r1, 3
	stw 3(bp), r1		; port + 3 set LCR - validate
	pop	bp
	pop	pc

; MEMSET (char *dst, int c, uint n)
; bp + 8 has n
; bp + 6 has c
; bp + 4 has dst

_memset:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r1,4(bp) ; load dst
	ldw	r2,6(bp) ; load c
	ldw	r3,8(bp) ; load n
	; skip if n = aligned
	andi r4,r3,1
	skip.eq r4, r0
	br _stosb
	; skip if dst = aligned
	andi r4, r1, 1
	skip.eq r4, r0
	br _stosb
	; both n and dst are 2 byte aligned
	shl r4, r2, 8
	or r2, r2, r4
	subi r3, r3, 2
_stoswL1:
	add	r4,r1,r3
	stw	r0(r4),r2
	addskpi.z r3, r3, -2
	br _stoswL1
	stw r0(r1), r2
	br _memsetend
_stosb:
	subi r3, r3, 1
_stosbL1:
	add	r4,r1,r3
	stb	r0(r4),r2
	addskpi.z r3, r3, -1
	br _stosbL1
	stb r0(r1), r2
_memsetend:
	pop	bp
	pop	pc

_halt:
  hlt

_breek:
	push r1
	brk
	pop pc

_rsi:
	push r1
	rsi
	pop pc

_writepte:
	push r1
	push bp
	mov bp, sp
	ldw r1, 4(bp)
	ldw r2, 6(bp)
	wpte r1, r2
	pop bp
	pop pc

_readpt:
; readpt(ptb, pointer to uint[32])
	push r1
	push bp
	mov bp, sp
	ldw r1, 4(bp) ; ptb
	ldw r2, 6(bp) ; ptr to pgtable array
	ldi r3, 32 ; one extra cause we sub 1 in loop
_readptL1:
	subi r3, r3, 1
	add r4, r1, r3
	lpte r4, r4
	stw r3(r2), r4
	skip.eq r3, r0
	br _readptL1
	pop bp
	pop pc


_switchptb:
	push r1
	push bp
	mov bp, sp
	ldw r1, 4(bp)
	wptb r1
	pop bp
	pop pc

_clearptb:
; clear all page entries in an address space
	push r1
	push bp
	mov bp, sp
	ldw r1, 4(bp)
	ldi r2, 32 ; one extra cause we sub 1 in loop
	add r2, r1, r2
_clearptbL1:
	subi r2, r2, 1
	wpte r2, 0
	skip.eq r2, r1
	br _clearptbL1
	pop bp
	pop pc

_memmove:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r4,4(bp)    ; dst
	ldw	r3,6(bp)    ; src
	ldw	r2,8(bp)    ; n
	add	r4,r4,r2
	add	r3,r3,r2
	br _memmoveL3
_memmoveL2:
	subi	r2,r2,1
	addi	r3,r3,-1
	addi	r4,r4,-1
	ldb	r1,r0(r3)
	stb	r0(r4),r1
_memmoveL3:
	skip.eq r2,r0
	br _memmoveL2
	mov	r1,r4
	mov	sp, bp
	pop	bp
	pop	pc

_strcopy:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r4,4(bp)    ; dst
	ldw	r3,6(bp)    ; src
	ldw	r2,8(bp)    ; n
	add	r4,r4,r2
	add	r3,r3,r2
	br _strcopyL3
_strcopyL2:
	subi	r2,r2,1
	addi	r3,r3,-1
	addi	r4,r4,-1
	ldb	r1,r0(r3)
	skip.eq r1,r0
	br _strcopyL4
	stb r0(r4),r0
	br _strcopyL3
_strcopyL4:
	stb	r0(r4),r1
_strcopyL3:
	skip.eq r2,r0
	br _strcopyL2
	mov	r1,r4
	mov	sp, bp
	pop	bp
	pop	pc

;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _initkmem
;	.code
_initkmem:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	stw	-2(bp),r0
L2_kalloc:
	ldw	r4,-2(bp)
	shl	r4, r4, 1 ; [via index]
	la16	r3,_pframe
	ld16	r2, 0xffff
	stw	r4(r3),r2
L3_kalloc:
	ldw	r4,-2(bp)
	addi	r4,r4,1
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	ld16	r3, 15
	skip.gt	r4,r3
	br	L2_kalloc
	la16	r4,_pframe
	stw	r0(r4),r0
L1_kalloc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _findfreepg
_findfreepg:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 6
	sub	sp, sp, r4
	stw	-6(bp),r0
L7_kalloc:
	ldw	r4,-6(bp)
	shl	r4, r4, 1 ; [via index]
	la16	r3,_pframe
	ldw	r4,r4(r3)
	skip.eq r4,r0
	br L1_kalloc1
	la16	r4,L8_kalloc
	br.r r4
L1_kalloc1:
	ld16	r4, 15
	stw	-2(bp),r4
L1_kalloc3:
	ld16	r4, 1
	ldw	r3,-2(bp)
	shl.r	r4, r4, r3
	stw	-4(bp),r4
	ldw	r4,-4(bp)
	ldw	r3,-6(bp)
	shl	r3, r3, 1 ; [via index]
	la16	r2,_pframe
	ldw	r3,r3(r2)
	and	r4,r4,r3
	skip.ne	r4,r0
	br	L1_kalloc7
	ldw	r4,-6(bp)
	shl	r4, r4, 4
	ld16	r3, 15
	ldw	r2,-2(bp)
	sub	r3,r3,r2
	add	r4,r4,r3
	mov	r1,r4
	la16	r4,L6_kalloc
	br.r r4
L1_kalloc7:
L1_kalloc4:
	ldw	r4,-2(bp)
	subi	r4,r4,1
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	skip.lt r4, r0
	br L1_kalloc3
L8_kalloc:
	ldw	r4,-6(bp)
	addi	r4,r4,1
	stw	-6(bp),r4
	ldw	r4,-6(bp)
	ld16	r3, 16
	skip.gt	r4,r3
	br	L7_kalloc
	la16	r4,L1_kalloc9
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
	mov	r1,r0
L6_kalloc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _kalloc
_kalloc:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 16
	sub	sp, sp, r4
	la16	r4,_findfreepg
	addi	r1,pc,2
	br.r	r4
	mov	r4,r1
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	stw	-8(bp),r4
	ld16	r3, 16
	stw	-10(bp),r3

push r4
push r3
ldi r2, 6
add r1, pc, r2
la16 r2, _div
br.r r2
; result will be in r1

	stw	-4(bp),r1
	ld16	r4, 1
	stw	-16(bp),r4
	ld16	r3, 15
	stw	-14(bp),r3
	ldw	r2,-8(bp)
	stw	-12(bp),r2
	ldw	r1,-10(bp)

push r2
push r1
ldi r2, 6
add r1, pc, r2
la16 r2, _mod
br.r r2
; result will be in r1

	ldw	r4,-14(bp)
	sub	r4,r4,r1
	ldw	r3,-16(bp)
	shl.r	r4, r3, r4
	sub	r4,r0,r4
	subi	r4,r4,1
	stw	-6(bp),r4
	ldw	r4,-4(bp)
	shl	r4, r4, 1
	la16	r3,_pframe
	add	r4,r4,r3
	ldw	r3,r0(r4)
	ldw	r2,-6(bp)
	and	r3,r3,r2
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	push	r4
	la16	r4,L2_kalloc1
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	mov	r1,r4
L2_kalloc0:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _kfree
_kfree:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	ldw	r4,4(bp)
	shr	r3, r4, 4
	stw	-2(bp),r3
	ld16	r3, 1
	ld16	r2, 15
	and	r4,r4,r2
	sub	r4,r2,r4
	shl.r	r4, r3, r4
	stw	-4(bp),r4
	ldw	r4,-2(bp)
	shl	r4, r4, 1
	la16	r3,_pframe
	add	r4,r4,r3
	ldw	r3,r0(r4)
	ldw	r2,-4(bp)
	or	r3,r3,r2
	stw	r0(r4),r3
	ldw	r4,4(bp)
	push	r4
	la16	r4,L2_kalloc3
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
L2_kalloc2:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _halt
;	.extern _kprintf
	.bss
;	.global _pframe
_pframe:
	defs 32
	.data
L2_kalloc3:
	defb 107
	defb 102
	defb 114
	defb 101
	defb 101
	defb 58
	defb 32
	defb 102
	defb 114
	defb 101
	defb 101
	defb 100
	defb 32
	defb 112
	defb 97
	defb 103
	defb 101
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L2_kalloc1:
	defb 107
	defb 97
	defb 108
	defb 108
	defb 111
	defb 99
	defb 58
	defb 32
	defb 97
	defb 108
	defb 108
	defb 111
	defb 99
	defb 97
	defb 116
	defb 101
	defb 100
	defb 32
	defb 112
	defb 97
	defb 103
	defb 101
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L1_kalloc9:
	defb 70
	defb 105
	defb 110
	defb 100
	defb 102
	defb 114
	defb 101
	defb 101
	defb 112
	defb 103
	defb 58
	defb 32
	defb 78
	defb 79
	defb 32
	defb 70
	defb 82
	defb 69
	defb 69
	defb 32
	defb 80
	defb 65
	defb 71
	defb 69
	defb 32
	defb 70
	defb 79
	defb 85
	defb 78
	defb 68
	defb 33
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

	.data 0x1000
;	.global _kptb
_kptb:
defw 0x0
;	.global _initpag
;	.code
_initpag:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,_initkmem
	addi	r1,pc,2
	br.r	r4
L1_vm:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _mapkernelvm
_mapkernelvm:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,L3_vm
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	stw	-2(bp),r0
L4_vm:
	ldw	r4,-2(bp)
	shl	r3, r4, 8
	ori	r3,r3,1
	push	r3
	ldw	r3,4(bp)
	add	r4,r3,r4
	ld16	r3, 16
	add	r4,r4,r3
	push	r4
	la16	r4,_writepte
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
L5_vm:
	ldw	r4,-2(bp)
	addi	r4,r4,1
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	ld16	r3, 14
	skip.gt	r4,r3
	br	L4_vm
	ldw	r4,6(bp)
	shl	r4, r4, 8
	ld16	r3, 3
	or	r4,r4,r3
	push	r4
	ldw	r4,4(bp)
	ld16	r3, 31
	add	r4,r4,r3
	push	r4
	la16	r4,_writepte
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
L2_vm:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _mappage
_mappage:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	ldw	r4,10(bp)
	stb	10(bp),r4
	ldw	r4,6(bp)
	shl	r4, r4, 8
	ldb	r3,10(bp)
	or	r4,r4,r3
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	push	r4
	ldw	r4,4(bp)
	ldw	r3,8(bp)
	add	r4,r4,r3
	push	r4
	la16	r4,_writepte
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
L8_vm:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _inituvm
_inituvm:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	la16	r4,_kalloc
	addi	r1,pc,2
	br.r	r4
	mov	r4,r1
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	shl	r4, r4, 8
	ori	r4,r4,1
	push	r4
	push	r0
	la16	r4,_writepte
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	shl	r4, r4, 8
	ori	r4,r4,1
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_writepte
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ld16	r4, 26
	push	r4
	ldw	r4,6(bp)
	push	r4
	push	r0
	la16	r4,_memmove
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
L9_vm:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _copyuvm
_copyuvm:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 6
	sub	sp, sp, r4
	ldw	r4,8(bp)
	shr	r4, r4, 11
	stw	-6(bp),r4
	ldw	r4,-6(bp)
	push	r4
	ldw	r4,6(bp)
	push	r4
	la16	r4,L1_vm1
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	stw	-2(bp),r0
	la16	r4,L1_vm5
	br.r r4
L1_vm2:
	la16	r4,_kalloc
	addi	r1,pc,2
	br.r	r4
	mov	r4,r1
	stw	-4(bp),r4
	ld16	r4, 3
	push	r4
	ld16	r4, 30
	push	r4
	ldw	r4,-4(bp)
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_mappage
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
	ld16	r4, 2048
	push	r4
	ldw	r3,-2(bp)
	shl	r3, r3, 11
	push	r3
	ld16	r3, 30

push bp
push r3
push r4
ldi r2, 6
add bp, pc, r2
la16 r2, _mult
br.r r2
; result should be in r1
pop bp

brk
	push	r1
	la16	r4,_memmove
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ld16	r4, 1
	push	r4
	ldw	r4,-2(bp)
	push	r4
	ldw	r4,-4(bp)
	push	r4
	ldw	r4,6(bp)
	push	r4
	la16	r4,_mappage
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
L1_vm3:
	ldw	r4,-2(bp)
	addi	r4,r4,1
	stw	-2(bp),r4
L1_vm5:
	ldw	r4,-2(bp)
	ldw	r3,-6(bp)
	skip.ult	r3,r4
	br	L1_vm2
L1_vm0:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _loaduvm
_loaduvm:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 6
	sub	sp, sp, r4
	stw	-2(bp),r0
	ld16	r4, 2048
	push	r4
	push	r0
	push	r0
	la16	r4,_memset
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ldw	r4,8(bp)
	push	r4
	ldw	r4,6(bp)
	push	r4
	ldw	r4,-2(bp)
	stw	-6(bp),r4
	mov	r3,r4
	push	r3
	ldw	r3,4(bp)
	push	r3
	la16	r3,_readi
	stw	-4(bp),r3
	addi	r1,pc,2
	br.r	r3
	ldi	r2,8
	add	sp,sp,r2
	mov	r4,r1
	ldw	r3,-6(bp)
	add	r4,r3,r4
	stw	-2(bp),r4
	ld16	r1, 1
L1_vm6:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _freevm
_freevm:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 68
	sub	sp, sp, r4
	ldi	r4, -66
	add	r4, r4, bp
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_readpt
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	stw	-2(bp),r0
	la16	r4,L2_vm1
	br.r r4
L1_vm8:
	ld16	r4, 1
	ldw	r3,-2(bp)
	shl	r3, r3, 1 ; [via index]
	ldi	r2, -66
	add	r2, r2, bp
	ldw	r3,r3(r2)
	and	r3,r3,r4
	skip.eq r3,r4
	br L2_vm2
	ldi	r4, -68
	add	r4, r4, bp
	ldw	r3,-2(bp)
	shl	r3, r3, 1 ; [via index]
	ldi	r2, -66
	add	r2, r2, bp
	ldw	r3,r3(r2)
	shr	r3, r3, 8
	stw	r0(r4),r3
	ldi	r4, -68
	add	r4, r4, bp
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_kfree
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L2_vm2:
L1_vm9:
	ldw	r4,-2(bp)
	addi	r4,r4,1
	stw	-2(bp),r4
L2_vm1:
	ldw	r4,-2(bp)
	ld16	r3, 31
	skip.ult	r3,r4
	br	L1_vm8
L1_vm7:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _kfree
;	.extern _readpt
;	.extern _readi
;	.extern _memset
;	.extern _memmove
;	.extern _kalloc
;	.extern _writepte
;	.extern _kprintf
;	.extern _initkmem
	.data
L1_vm1:
	defb 99
	defb 111
	defb 112
	defb 121
	defb 117
	defb 118
	defb 109
	defb 58
	defb 32
	defb 116
	defb 97
	defb 114
	defb 103
	defb 101
	defb 116
	defb 32
	defb 37
	defb 120
	defb 44
	defb 32
	defb 112
	defb 97
	defb 103
	defb 101
	defb 115
	defb 32
	defb 116
	defb 111
	defb 32
	defb 99
	defb 111
	defb 112
	defb 121
	defb 58
	defb 32
	defb 37
	defb 120
	defb 0
L3_vm:
	defb 109
	defb 97
	defb 112
	defb 107
	defb 101
	defb 114
	defb 110
	defb 101
	defb 108
	defb 118
	defb 109
	defb 58
	defb 32
	defb 98
	defb 117
	defb 105
	defb 108
	defb 100
	defb 105
	defb 110
	defb 103
	defb 32
	defb 97
	defb 100
	defb 100
	defb 114
	defb 101
	defb 115
	defb 115
	defb 32
	defb 115
	defb 112
	defb 97
	defb 99
	defb 101
	defb 32
	defb 102
	defb 111
	defb 114
	defb 32
	defb 112
	defb 116
	defb 98
	defb 58
	defb 32
	defb 37
	defb 100
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _pinit
;	.code
_pinit:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	ld16	r4, 1
	stw	-4(bp),r4
	ld16	r4, 570
	push	r4
	push	r0
	la16	r4,_ptable
	push	r4
	la16	r4,_memset
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	la16	r4,_ptable
	stw	-2(bp),r4
	la16	r4,L5_proc
	br.r r4
L2_proc:
	ldw	r4,-2(bp)
	addi	r4,r4,2
	ldw	r3,-4(bp)
	shl	r3, r3, 5
	stw	r0(r4),r3
	ldw	r4,-4(bp)
	addi	r4,r4,1
	stw	-4(bp),r4
L3_proc:
	ldw	r4,-2(bp)
	ld16	r3, 38
	add	r4,r4,r3
	stw	-2(bp),r4
L5_proc:
	ldw	r4,-2(bp)
	la16	r3,_ptable+570
	skip.ulte	r3,r4
	br	L2_proc
	la16	r4,_sched+2
	stw	r0(r4),r0
	la16	r4,_sched+6
	ld16	r3, 16
	stw	r0(r4),r3
	la16	r4,_currproc
	la16	r3,_sched
	stw	r0(r4),r3
	la16	r4,_ptable
	push	r4
	la16	r4,L9_proc
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
L1_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _allocproc
_allocproc:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	la16	r4,_ptable
	stw	-2(bp),r4
	la16	r4,L1_proc4
	br.r r4
L1_proc1:
	ldw	r4,-2(bp)
	ld16	r3, 12
	add	r4,r4,r3
	ldw	r4,r0(r4)
	skip.eq r4,r0
	br L1_proc6
	la16	r4,L1_proc8
	br.r r4
L1_proc6:
L1_proc2:
	ldw	r4,-2(bp)
	ld16	r3, 38
	add	r4,r4,r3
	stw	-2(bp),r4
L1_proc4:
	ldw	r4,-2(bp)
	la16	r3,_ptable+570
	skip.ulte	r3,r4
	br	L1_proc1
	la16	r4,L1_proc9
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L1_proc8:
	ldw	r4,-2(bp)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L2_proc0
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_kalloc
	addi	r1,pc,2
	br.r	r4
	ldw	r3,-2(bp)
	ld16	r2, 6
	add	r3,r3,r2
	mov	r4,r1
	stw	r0(r3),r4
	ld16	r4, 3
	push	r4
	ld16	r4, 30
	push	r4
	ldw	r4,-2(bp)
	ld16	r3, 6
	add	r4,r4,r3
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_currproc
	ldw	r4,r0(r4)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_mappage
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
	ldw	r4,-2(bp)
	ld16	r3, 12
	add	r4,r4,r3
	ld16	r3, 1
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	ld16	r3, 14
	add	r4,r4,r3
	la16	r3,_nextpid
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	la16	r4,_nextpid
	ldw	r3,r0(r4)
	addi	r3,r3,1
	stw	r0(r4),r3
	ld16	r4, 0xf700
	stw	-4(bp),r4
	ldw	r4,-4(bp)
	ld16	r3, -16
	add	r4,r4,r3
	stw	-4(bp),r4
	ldw	r4,-2(bp)
	ld16	r3, 18
	add	r4,r4,r3
	ldw	r3,-4(bp)
	ld16	r2, 2048
	add	r3,r3,r2
	stw	r0(r4),r3
	ldw	r4,-4(bp)
	addi	r4,r4,-2
	stw	-4(bp),r4
	ldw	r4,-4(bp)
	la16	r3,_contextret
	stw	r0(r4),r3
	ldw	r4,-4(bp)
	addi	r4,r4,-2
	stw	-4(bp),r4
	ldw	r4,-2(bp)
	addi	r4,r4,4
	ldw	r3,-4(bp)
	ld16	r2, 2048
	add	r3,r3,r2
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	ld16	r3, 18
	add	r4,r4,r3
	ldw	r4,r0(r4)
	ld16	r3, 2048
	sub	r4,r4,r3
	push	r4
	la16	r4,L2_proc1
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	ld16	r3, 18
	add	r4,r4,r3
	ldw	r4,r0(r4)
	ld16	r3, 2048
	sub	r4,r4,r3
	push	r4
	la16	r4,_copyuregs
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	ldw	r1,-2(bp)
L1_proc0:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _userinit
_userinit:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	la16	r4,_allocproc
	addi	r1,pc,2
	br.r	r4
	stw	-4(bp),r1
	ldw	r4,-4(bp)
	ld16	r3, 6
	add	r3,r4,r3
	ldw	r3,r0(r3)
	push	r3
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_mapkernelvm
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_initcodestart
	push	r4
	ldw	r4,-4(bp)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_inituvm
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ld16	r4, 0xf6f0
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	addi	r4,r4,8
	ld16	r3, 2048
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	ld16	r3, 10
	add	r4,r4,r3
	ld16	r3, 2048
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	ld16	r3, 12
	add	r4,r4,r3
	stw	r0(r4),r0
	ldw	r4,-2(bp)
	ld16	r3, 14
	add	r4,r4,r3
	ld16	r3, 12
	stw	r0(r4),r3
	ldw	r4,-4(bp)
	ld16	r3, 12
	add	r4,r4,r3
	ld16	r3, 3
	stw	r0(r4),r3
	la16	r4,L2_proc3
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L2_proc2:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _scheduler
_scheduler:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	la16	r4,L2_proc6
	br.r r4
L2_proc5:
	ld16	r4, 1
	stw	-4(bp),r4
	la16	r4,_ptable
	stw	-2(bp),r4
	la16	r4,L3_proc1
	br.r r4
L2_proc8:
	ldw	r4,-2(bp)
	ld16	r3, 12
	add	r4,r4,r3
	ldw	r4,r0(r4)
	ld16	r3, 3
	skip.ne	r4,r3
	br	L3_proc3
	la16	r4,L2_proc9
	br.r r4
L3_proc3:
	stw	-4(bp),r0
	ldw	r4,-2(bp)
	la16	r3,_currproc
	stw	r0(r3),r4
	ld16	r3, 12
	add	r4,r4,r3
	ld16	r3, 4
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L3_proc5
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	addi	r3,r4,4
	ldw	r3,r0(r3)
	push	r3
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_sched+4
	push	r4
	la16	r4,_swtch
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	la16	r4,_currproc
	stw	r0(r4),r0
L2_proc9:
	ldw	r4,-2(bp)
	ld16	r3, 38
	add	r4,r4,r3
	stw	-2(bp),r4
L3_proc1:
	ldw	r4,-2(bp)
	la16	r3,_ptable+570
	skip.ulte	r3,r4
	br	L2_proc8
	ldw	r4,-4(bp)
	skip.ne	r4,r0
	br	L3_proc7
	ld16	r4, 1
	push	r4
	la16	r4,_sdirq
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_rsi
	addi	r1,pc,2
	br.r	r4
L3_proc7:
L2_proc6:
	la16	r4,L2_proc5
	br.r r4
L2_proc4:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _fork
_fork:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	la16	r4,_allocproc
	addi	r1,pc,2
	br.r	r4
	stw	-2(bp),r1
	ldw	r4,-2(bp)
	ld16	r3, 6
	add	r3,r4,r3
	ldw	r3,r0(r3)
	push	r3
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_mapkernelvm
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 16
	add	r4,r4,r3
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L40_proc
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	ld16	r3, 16
	add	r4,r4,r3
	ldw	r4,r0(r4)
	stw	r0(r4),r0
	ldw	r4,-2(bp)
	la16	r3,_currproc
	ldw	r3,r0(r3)
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	addi	r4,r4,8
	la16	r3,_currproc
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	ld16	r3, 12
	add	r4,r4,r3
	ld16	r3, 3
	stw	r0(r4),r3
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ldw	r3,r0(r4)
	push	r3
	ld16	r3, 2
	ldw	r2,-2(bp)
	add	r2,r2,r3
	ldw	r2,r0(r2)
	push	r2
	add	r4,r4,r3
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_copyuvm
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ldw	r4,-2(bp)
	ld16	r3, 14
	add	r3,r4,r3
	ldw	r3,r0(r3)
	push	r3
	addi	r3,r4,4
	ldw	r3,r0(r3)
	push	r3
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L41_proc
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
	ldw	r4,-2(bp)
	ld16	r3, 14
	add	r4,r4,r3
	ldw	r4,r0(r4)
	mov	r1,r4
L3_proc9:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _tosched
_tosched:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,_sched
	push	r4
	la16	r4,L43_proc
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_sched+4
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_sched+2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_currproc
	ldw	r4,r0(r4)
	addi	r4,r4,4
	push	r4
	la16	r4,_swtch
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
L42_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _sleep
_sleep:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 26
	add	r4,r4,r3
	ldw	r3,4(bp)
	stw	r0(r4),r3
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 12
	add	r4,r4,r3
	ld16	r3, 2
	stw	r0(r4),r3
	la16	r4,_tosched
	addi	r1,pc,2
	br.r	r4
L46_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _wakeup
_wakeup:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	la16	r4,_ptable
	stw	-2(bp),r4
	la16	r4,L5_proc1
	br.r r4
L48_proc:
	ldw	r4,-2(bp)
	ld16	r3, 26
	add	r4,r4,r3
	ldw	r4,r0(r4)
	ldw	r3,4(bp)
	skip.eq r4,r3
	br L5_proc3
	ldw	r4,-2(bp)
	ld16	r3, 12
	add	r4,r4,r3
	ld16	r3, 3
	stw	r0(r4),r3
L5_proc3:
L49_proc:
	ldw	r4,-2(bp)
	ld16	r3, 38
	add	r4,r4,r3
	stw	-2(bp),r4
L5_proc1:
	ldw	r4,-2(bp)
	la16	r3,_ptable+570
	skip.ulte	r3,r4
	br	L48_proc
L47_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _wait
_wait:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	stw	-4(bp),r0
	la16	r4,_ptable
	stw	-2(bp),r4
	la16	r4,L5_proc9
	br.r r4
L5_proc6:
	ldw	r4,-2(bp)
	addi	r4,r4,8
	ldw	r4,r0(r4)
	la16	r3,_currproc
	ldw	r3,r0(r3)
	skip.eq r4,r3
	br L61_proc
	ldw	r4,-2(bp)
	ld16	r3, 12
	add	r4,r4,r3
	ldw	r4,r0(r4)
	ld16	r3, 5
	skip.eq r4,r3
	br L63_proc
	ldw	r4,-2(bp)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_freevm
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,L64_proc
	br.r r4
L63_proc:
	ldw	r4,-4(bp)
	addi	r4,r4,1
	stw	-4(bp),r4
L64_proc:
L61_proc:
L5_proc7:
	ldw	r4,-2(bp)
	ld16	r3, 38
	add	r4,r4,r3
	stw	-2(bp),r4
L5_proc9:
	ldw	r4,-2(bp)
	la16	r3,_ptable+570
	skip.ulte	r3,r4
	br	L5_proc6
	ldw	r4,-4(bp)
	push	r4
	la16	r4,L65_proc
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-4(bp)
	skip.gt	r4,r0
	br	L66_proc
	la16	r4,_ptable
	push	r4
	la16	r4,_sleep
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,L67_proc
	br.r r4
L66_proc:
	ld16	r1, -1
	la16	r4,L5_proc5
	br.r r4
L67_proc:
	mov	r1,r0
L5_proc5:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _exit
_exit:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 12
	add	r4,r4,r3
	ld16	r3, 5
	stw	r0(r4),r3
	la16	r4,_ptable
	push	r4
	la16	r4,_wakeup
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_tosched
	addi	r1,pc,2
	br.r	r4
L68_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _freevm
;	.extern _copyuvm
;	.extern _rsi
;	.extern _sdirq
;	.extern _swtch
;	.extern _inituvm
;	.extern _mapkernelvm
;	.extern _copyuregs
;	.extern _mappage
;	.extern _kalloc
;	.extern _halt
;	.extern _kprintf
;	.extern _memset
;	.extern _initcodestart
;	.extern _contextret
	.bss
;	.global _nextpid
_nextpid:
	defs 2
;	.global _currproc
_currproc:
	defs 2
;	.global _sched
_sched:
	defs 38
;	.global _ptable
_ptable:
	defs 570
	.data
L65_proc:
	defb 119
	defb 97
	defb 105
	defb 116
	defb 58
	defb 32
	defb 97
	defb 99
	defb 116
	defb 105
	defb 118
	defb 101
	defb 99
	defb 104
	defb 105
	defb 108
	defb 100
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L43_proc:
	defb 116
	defb 111
	defb 115
	defb 99
	defb 104
	defb 101
	defb 100
	defb 58
	defb 32
	defb 115
	defb 119
	defb 105
	defb 116
	defb 99
	defb 104
	defb 105
	defb 110
	defb 103
	defb 32
	defb 116
	defb 111
	defb 32
	defb 115
	defb 99
	defb 104
	defb 101
	defb 100
	defb 117
	defb 108
	defb 101
	defb 114
	defb 32
	defb 97
	defb 116
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L41_proc:
	defb 72
	defb 87
	defb 71
	defb 58
	defb 32
	defb 112
	defb 116
	defb 98
	defb 58
	defb 32
	defb 37
	defb 120
	defb 44
	defb 32
	defb 107
	defb 115
	defb 116
	defb 97
	defb 99
	defb 107
	defb 58
	defb 32
	defb 37
	defb 120
	defb 44
	defb 32
	defb 112
	defb 105
	defb 100
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L40_proc:
	defb 102
	defb 111
	defb 114
	defb 107
	defb 58
	defb 32
	defb 42
	defb 116
	defb 102
	defb 58
	defb 32
	defb 37
	defb 120
	defb 0
L3_proc5:
	defb 115
	defb 99
	defb 104
	defb 101
	defb 100
	defb 117
	defb 108
	defb 101
	defb 114
	defb 58
	defb 32
	defb 97
	defb 98
	defb 111
	defb 117
	defb 116
	defb 32
	defb 116
	defb 111
	defb 32
	defb 115
	defb 119
	defb 105
	defb 116
	defb 99
	defb 104
	defb 46
	defb 46
	defb 46
	defb 116
	defb 111
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L2_proc3:
	defb 117
	defb 115
	defb 101
	defb 114
	defb 105
	defb 110
	defb 105
	defb 116
	defb 58
	defb 32
	defb 102
	defb 105
	defb 114
	defb 115
	defb 116
	defb 32
	defb 117
	defb 115
	defb 101
	defb 114
	defb 32
	defb 112
	defb 114
	defb 111
	defb 99
	defb 101
	defb 115
	defb 115
	defb 32
	defb 114
	defb 101
	defb 97
	defb 100
	defb 121
	defb 32
	defb 116
	defb 111
	defb 32
	defb 114
	defb 117
	defb 110
	defb 46
	defb 46
	defb 10
	defb 0
L2_proc1:
	defb 97
	defb 108
	defb 111
	defb 99
	defb 112
	defb 114
	defb 111
	defb 99
	defb 58
	defb 32
	defb 112
	defb 114
	defb 101
	defb 112
	defb 97
	defb 114
	defb 105
	defb 110
	defb 103
	defb 32
	defb 116
	defb 111
	defb 32
	defb 99
	defb 111
	defb 112
	defb 121
	defb 117
	defb 114
	defb 101
	defb 103
	defb 115
	defb 58
	defb 32
	defb 37
	defb 120
	defb 0
L2_proc0:
	defb 102
	defb 111
	defb 117
	defb 110
	defb 100
	defb 32
	defb 102
	defb 114
	defb 101
	defb 101
	defb 32
	defb 115
	defb 108
	defb 111
	defb 116
	defb 32
	defb 97
	defb 116
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L1_proc9:
	defb 97
	defb 108
	defb 108
	defb 111
	defb 99
	defb 112
	defb 114
	defb 111
	defb 99
	defb 58
	defb 32
	defb 110
	defb 111
	defb 32
	defb 102
	defb 114
	defb 101
	defb 101
	defb 32
	defb 115
	defb 108
	defb 111
	defb 116
	defb 32
	defb 105
	defb 110
	defb 32
	defb 112
	defb 116
	defb 97
	defb 98
	defb 108
	defb 101
	defb 33
	defb 10
	defb 0
L9_proc:
	defb 112
	defb 105
	defb 110
	defb 105
	defb 116
	defb 58
	defb 32
	defb 112
	defb 116
	defb 97
	defb 98
	defb 108
	defb 101
	defb 32
	defb 105
	defb 110
	defb 105
	defb 116
	defb 105
	defb 97
	defb 108
	defb 105
	defb 115
	defb 101
	defb 100
	defb 32
	defb 97
	defb 116
	defb 58
	defb 32
	defb 48
	defb 120
	defb 37
	defb 120
	defb 46
	defb 10
	defb 0
;	.end


; when we trap we need to check if it is a timer irq (0x20)
; if it is we push all user space registers, if not than we don't...'
; the trap number is in sr1
; actually, we would also need to push everything on a fork syscall...
; lets try to implement a separate asm routine for that, the uregs are frozen anyway..

_alltraps:
	; if r1 == 0x20 then push.u everything else not
	; FIXME: this does not handle concurrent traps yet
	ldi r3, 0x20
	and r4, r1, r3
	skip.eq r4, r3
	br simpletrap_trapasm
	hlt

_contextret:
; we are returning from a trap after a context switch
; this means we need to restore the user registers which were saved
; to the kstack as a trapframe when we trapped
; sp is pointing at the bottom of tf (r1)

	pop.u r1
	pop.u r2
	pop.u r3
	pop.u r4
	pop.u bp
	pop.u sp
	pop.u pc
	pop r1
	wcr.u r1
	reti

simpletrap_trapasm:
	push.u pc
	push.u sp
	push r1 				;trapnr
	mov r1, sp  		; GOTCHA_trapasm: pushing sp pushing the updated value not the old value!!
	push r1
	la16 r3, _trap
	addi r1, pc, 2
	br.r r3

; when we return from a (non context switch) trap
trapret_trapasm:
; we prob need to pop some more stuff of the stack but lets see
	addi sp, sp, 2 	; pops sp of (used to pass argument to trap(*tf))
	pop.u r1			 	; load return value to r1
	pop.u sp			 	; pop sp (will not have changed)
	pop.u pc			 	; will only have changed for exec syscall
	reti

;
; to make a context switch on dme:
; - INSIGHT: a context switch is just a SP switch... ip just keeps processing
; 	- save context on old stack
; 	- switch to new address space
; 	- switch sp (from saved context)
; 	- pop context of new stack
;
; void swtch(&old->context, new_proc->ptb, new_proc->context;
_swtch:
	push r1
	push bp
	mov bp, sp

	ldw r1, 4(bp) ; sched->context (to save SP)
	ldw r2, 6(bp) ; ptb
	ldw r3, 8(bp) ; context (= new SP)
	; i dont think i need to save much except sp and bp...
	; the registers are all clear after switch is called..

	stw r0(r1), sp  ; store old sp in sched->context
	wptb r2					; switch to new address space
	mov sp, r3      ; switch sp to new stack bottom

	pop bp
	pop pc




; this routine pulls the uregs into the child->contextframe
; so that allocproc can use them to recreate
;
; copyuregs(proc->cf)


; _contextret:
; ; we are returning from a trap after a context switch
; ; this means we need to restore the user registers which were saved
; ; to the kstack as a trapframe when we trapped
; ; sp is pointing at the bottom of tf (r1)
; 	pop.u r1
; 	pop.u r2
; 	pop.u r3
; 	pop.u r4
; 	pop.u bp
; 	pop.u sp
; 	pop.u pc
; 	pop r1
; 	wcr.u r1
; 	reti

_copyuregs:
	push r1
	push bp
	mov bp, sp

	ldw r1, 4(bp) ; proc->context* ; this points into the child's kstack

	; what is going on here:
	; we are pushing user reg r1 onto the kstack (only instruction for getting a ureg in trap mode)
	; we then immediately pop it of the kstack into r2 and store it in its intended location
	; r1 should be set to 0 so we return 0 in the child (as a PID)
	mov r2, r0
	stw 0(r1), r2

	push.u r2
	pop r2
	addi r1,r1, 2
	stw 0(r1), r2

	push.u r3
	pop r2
	addi r1,r1, 2
	stw 0(r1), r2

	push.u r4
	pop r2
	addi r1,r1, 2
	stw 0(r1), r2

	push.u bp
	pop r2
	addi r1,r1, 2
	stw 0(r1), r2

	push.u sp
	pop r2
	addi r1,r1, 2
	stw 0(r1), r2

	push.u pc
	pop r2
	addi r1,r1, 2
	stw 0(r1), r2

	lcr.u r2
	addi r1,r1, 2
	stw 0(r1), r2

	pop bp
	pop pc




;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _trap
;	.code
_trap:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 16
	add	r4,r4,r3
	ldw	r3,4(bp)
	stw	r0(r4),r3
	ldw	r4,4(bp)
	addi	r3,r4,2
	ldw	r3,r0(r3)
	push	r3
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L2_trap
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ldw	r4,4(bp)
	ldw	r4,r0(r4)
	ld16	r3, 2
	skip.eq r4,r3
	br L3_trap
	ldw	r4,4(bp)
	addi	r4,r4,4
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L5_trap
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L3_trap:
	ldw	r4,4(bp)
	ldw	r4,r0(r4)
	ld16	r3, 16
	skip.eq r4,r3
	br L6_trap
	la16	r4,L8_trap
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	ldw	r4,4(bp)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L9_trap
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_syscall
	addi	r1,pc,2
	br.r	r4
L6_trap:
	ldw	r4,4(bp)
	ldw	r4,r0(r4)
	ld16	r3, 8
	skip.eq r4,r3
	br L1_trap0_trap
	push	r0
	la16	r4,_sdirq
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L1_trap0_trap:
L1_trap:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _sdirq
;	.extern _syscall
;	.extern _halt
;	.extern _kprintf
;	.extern _currproc
	.data
L9_trap:
	defb 117
	defb 115
	defb 112
	defb 32
	defb 112
	defb 111
	defb 105
	defb 110
	defb 116
	defb 115
	defb 32
	defb 116
	defb 111
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L8_trap:
	defb 83
	defb 89
	defb 83
	defb 67
	defb 65
	defb 76
	defb 76
	defb 33
	defb 32
	defb 45
	defb 32
	defb 0
L5_trap:
	defb 80
	defb 65
	defb 71
	defb 69
	defb 32
	defb 70
	defb 65
	defb 85
	defb 76
	defb 84
	defb 33
	defb 32
	defb 98
	defb 121
	defb 32
	defb 105
	defb 110
	defb 115
	defb 116
	defb 114
	defb 117
	defb 99
	defb 116
	defb 105
	defb 111
	defb 110
	defb 32
	defb 97
	defb 116
	defb 58
	defb 32
	defb 37
	defb 120
	defb 0
L2_trap:
	defb 84
	defb 114
	defb 97
	defb 112
	defb 58
	defb 32
	defb 37
	defb 120
	defb 44
	defb 32
	defb 117
	defb 83
	defb 80
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

	.data 0x1000
_syscalls:
defw 0x0
	defw _sys_fork ; DEFADDRESS
	defw _sys_exit ; DEFADDRESS
	defw _sys_wait ; DEFADDRESS
defw 0x0
defw 0x0
defw 0x0
	defw _sys_exec ; DEFADDRESS
defw 0x0
defw 0x0
defw 0x0
defw 0x0
defw 0x0
defw 0x0
defw 0x0
defw 0x0
	defw _sys_write ; DEFADDRESS
;	.global _argint
;	.code
_argint:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 16
	add	r4,r4,r3
	ldw	r4,r0(r4)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	ld16	r3, 6
	add	r4,r4,r3
	ldw	r3,4(bp)
	shl	r3, r3, 1
	add	r4,r4,r3
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	push	r4
	la16	r4,L2_syscall
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,6(bp)
	ldw	r3,-2(bp)
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	mov	r1,r0
L1_syscall:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _argstr
_argstr:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	ldi	r4, -2
	add	r4, r4, bp
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_argint
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	skip.lt r1, r0
	br L4_syscall
	ld16	r1, -1
	la16	r4,L3_syscall
	br.r r4
L4_syscall:
	ldw	r4,-2(bp)
	push	r4
	la16	r4,L6_syscall
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,6(bp)
	ldw	r3,-2(bp)
	stw	r0(r4),r3
	ldw	r4,6(bp)
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L7_syscall
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	mov	r1,r0
L3_syscall:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _argptr
_argptr:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	ldi	r4, -2
	add	r4, r4, bp
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_argint
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	skip.lt r1, r0
	br L9_syscall
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L9_syscall:
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ldw	r4,r0(r4)
	ldw	r3,4(bp)
	skip.ulte	r3,r4
	br	L1_syscall3
	ldw	r3,-2(bp)
	ldw	r2,8(bp)
	add	r3,r3,r2
	skip.ult	r4,r3
	br	L1_syscall1
L1_syscall3:
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L1_syscall1:
	ldw	r4,6(bp)
	ldw	r3,-2(bp)
	stw	r0(r4),r3
	mov	r1,r0
L8_syscall:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _syscall
_syscall:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 16
	add	r4,r4,r3
	ldw	r4,r0(r4)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	ldw	r4,r0(r4)
	stw	-2(bp),r4
	ldw	r4,-2(bp)
	shl	r4, r4, 1
	la16	r3,_syscalls
	add	r4,r4,r3
	ldw	r4,r0(r4)
	skip.eq r4,r0
	br L1_syscall5
	ldw	r4,-2(bp)
	push	r4
	la16	r4,L1_syscall7
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
	la16	r4,L1_syscall6
	br.r r4
L1_syscall5:
	ldw	r4,-2(bp)
	push	r4
	la16	r4,L1_syscall8
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	shl	r4, r4, 1
	la16	r3,_syscalls
	add	r4,r4,r3
	ldw	r4,r0(r4)
	addi	r1,pc,2
	br.r	r4
	la16	r3,_currproc
	ldw	r3,r0(r3)
	ld16	r2, 16
	add	r3,r3,r2
	ldw	r3,r0(r3)
	stw	r0(r3),r1
L1_syscall6:
L1_syscall4:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _halt
;	.extern _kprintf
;	.extern _currproc
;	.extern _sys_write
;	.extern _sys_wait
;	.extern _sys_exit
;	.extern _sys_fork
;	.extern _sys_exec
	.data
L1_syscall8:
	defb 115
	defb 121
	defb 115
	defb 99
	defb 97
	defb 108
	defb 108
	defb 58
	defb 32
	defb 99
	defb 97
	defb 108
	defb 108
	defb 32
	defb 105
	defb 100
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L1_syscall7:
	defb 117
	defb 110
	defb 107
	defb 110
	defb 111
	defb 119
	defb 110
	defb 32
	defb 115
	defb 121
	defb 115
	defb 99
	defb 97
	defb 108
	defb 108
	defb 32
	defb 110
	defb 114
	defb 32
	defb 37
	defb 100
	defb 10
	defb 0
L7_syscall:
	defb 97
	defb 114
	defb 103
	defb 115
	defb 116
	defb 114
	defb 58
	defb 32
	defb 115
	defb 116
	defb 114
	defb 32
	defb 105
	defb 115
	defb 32
	defb 37
	defb 120
	defb 0
L6_syscall:
	defb 97
	defb 114
	defb 103
	defb 115
	defb 116
	defb 114
	defb 58
	defb 32
	defb 97
	defb 100
	defb 100
	defb 114
	defb 32
	defb 105
	defb 115
	defb 32
	defb 37
	defb 120
	defb 0
L2_syscall:
	defb 97
	defb 114
	defb 103
	defb 105
	defb 110
	defb 116
	defb 58
	defb 32
	defb 97
	defb 100
	defb 100
	defb 114
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _sys_exit
;	.code
_sys_exit:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,L2_sys_proc
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	mov	r1,r0
L1_sys_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _sys_exec
_sys_exec:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	ldi	r4, -2
	add	r4, r4, bp
	push	r4
	push	r0
	la16	r4,_argstr
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	skip.lt r1, r0
	br L4_sys_proc
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L4_sys_proc:
	ldw	r4,-2(bp)
	push	r4
	la16	r4,L6_sys_proc
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-4(bp)
	push	r4
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_exec
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	mov	r1,r0
L3_sys_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _sys_fork
_sys_fork:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,L8_sys_proc
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_fork
	addi	r1,pc,2
	br.r	r4
	mov	r4,r1
L7_sys_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _sys_wait
_sys_wait:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,_wait
	addi	r1,pc,2
	br.r	r4
	mov	r4,r1
L9_sys_proc:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _wait
;	.extern _fork
;	.extern _exec
;	.extern _halt
;	.extern _argstr
;	.extern _kprintf
	.data
L8_sys_proc:
	defb 115
	defb 121
	defb 115
	defb 95
	defb 102
	defb 111
	defb 114
	defb 107
	defb 58
	defb 32
	defb 99
	defb 97
	defb 108
	defb 108
	defb 101
	defb 100
	defb 10
	defb 0
L6_sys_proc:
	defb 115
	defb 121
	defb 115
	defb 95
	defb 101
	defb 120
	defb 101
	defb 99
	defb 58
	defb 32
	defb 112
	defb 97
	defb 116
	defb 104
	defb 32
	defb 105
	defb 115
	defb 32
	defb 37
	defb 115
	defb 10
	defb 0
L2_sys_proc:
	defb 115
	defb 121
	defb 115
	defb 95
	defb 101
	defb 120
	defb 105
	defb 116
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _sys_write
;	.code
_sys_write:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 6
	sub	sp, sp, r4
	ldi	r4, -6
	add	r4, r4, bp
	push	r4
	push	r0
	la16	r4,_argint
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	skip.lt r1, r0
	br L2_sys_file
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L2_sys_file:
	ldi	r4, -4
	add	r4, r4, bp
	push	r4
	ld16	r4, 2
	push	r4
	la16	r4,_argint
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	skip.lt r1, r0
	br L4_sys_file
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L4_sys_file:
	ldw	r4,-4(bp)
	push	r4
	ldw	r4,-2(bp)
	push	r4
	ld16	r4, 1
	push	r4
	la16	r4,_argptr
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	skip.lt r1, r0
	br L6_sys_file
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L6_sys_file:
	ldw	r4,-2(bp)
	push	r4
	la16	r4,L8_sys_file
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	mov	r1,r0
L1_sys_file:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _kprintf
;	.extern _argptr
;	.extern _halt
;	.extern _argint
	.data
L8_sys_file:
	defb 115
	defb 121
	defb 115
	defb 95
	defb 119
	defb 114
	defb 105
	defb 116
	defb 101
	defb 58
	defb 32
	defb 99
	defb 97
	defb 108
	defb 108
	defb 32
	defb 116
	defb 111
	defb 32
	defb 119
	defb 114
	defb 105
	defb 116
	defb 101
	defb 58
	defb 32
	defb 37
	defb 115
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _fsinit
;	.code
_fsinit:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,_sdinit
	addi	r1,pc,2
	br.r	r4
	la16	r4,_binit
	addi	r1,pc,2
	br.r	r4
	la16	r4,_readsb
	addi	r1,pc,2
	br.r	r4
L1_fs:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _readsb
_readsb:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	ld16	r4, 1
	push	r4
	la16	r4,_bread
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	stw	-2(bp),r1
	ld16	r4, 14
	push	r4
	ldw	r4,-2(bp)
	ld16	r3, 10
	add	r4,r4,r3
	push	r4
	la16	r4,_sb
	push	r4
	la16	r4,_memmove
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	la16	r4,_sb
	push	r4
	la16	r4,L3_fs
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
L2_fs:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _iget
_iget:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	la16	r4,_icache
	stw	-2(bp),r4
	la16	r4,L8_fs
	br.r r4
L5_fs:
	ldw	r4,-2(bp)
	ldw	r4,r0(r4)
	skip.eq r4,r0
	br L1_fs0
	ldw	r4,-2(bp)
	stw	-4(bp),r4
L1_fs0:
	ldw	r4,-2(bp)
	addi	r3,r4,4
	ldw	r3,r0(r3)
	ldw	r2,4(bp)
	skip.eq r3,r2
	br L1_fs2
	ldw	r4,r0(r4)
	skip.ne	r4,r0
	br	L1_fs2
	ldw	r1,-2(bp)
	la16	r4,L4_fs
	br.r r4
L1_fs2:
L6_fs:
	ldw	r4,-2(bp)
	ld16	r3, 34
	add	r4,r4,r3
	stw	-2(bp),r4
L8_fs:
	ldw	r4,-2(bp)
	la16	r3,_icache+340
	skip.ulte	r3,r4
	br	L5_fs
	ldw	r4,-4(bp)
	skip.eq r4,r0
	br L1_fs4
	la16	r4,L1_fs6
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L1_fs4:
	ldw	r4,-4(bp)
	addi	r4,r4,4
	ldw	r3,4(bp)
	stw	r0(r4),r3
	ldw	r4,-4(bp)
	ld16	r3, 1
	stw	r0(r4),r3
	ldw	r4,-4(bp)
	addi	r4,r4,2
	stw	r0(r4),r0
	ldw	r4,4(bp)
	push	r4
	ldw	r4,-4(bp)
	push	r4
	la16	r4,L1_fs7
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ldw	r1,-4(bp)
L4_fs:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _ilock
_ilock:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	ldw	r4,4(bp)
	addi	r4,r4,2
	ldw	r3,r0(r4)
	ori	r3,r3,1
	stw	r0(r4),r3
	ld16	r4, 2
	ldw	r3,4(bp)
	addi	r3,r3,2
	ldw	r3,r0(r3)
	and	r3,r3,r4
	skip.eq r3,r4
	br L1_fs9
	la16	r4,L1_fs8
	br.r r4
L1_fs9:
	la16	r4,_sb+10
	ldw	r4,r0(r4)
	skip.eq r4,r0
	br L2_fs1
	la16	r4,L2_fs4
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L2_fs1:
	ldw	r4,4(bp)
	addi	r4,r4,4
	ldw	r4,r0(r4)
	shr	r4, r4, 4
	la16	r3,_sb+10
	ldw	r3,r0(r3)
	add	r4,r4,r3
	push	r4
	la16	r4,_bread
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	stw	-4(bp),r1
	ldw	r4,4(bp)
	addi	r4,r4,4
	ld16	r3, 15
	ldw	r2,-4(bp)
	ld16	r1, 10
	add	r2,r2,r1
	ldw	r1,r0(r4)
	and	r1,r1,r3
	shl	r1, r1, 5
	add	r1,r1,r2
	stw	-2(bp),r1
	ldw	r1,-2(bp)
	push	r1
	ldw	r4,r0(r4)
	and	r4,r4,r3
	push	r4
	mov	r4,r2
	push	r4
	la16	r4,L2_fs6
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
	ldw	r4,4(bp)
	ld16	r3, 6
	add	r4,r4,r3
	ldw	r3,-2(bp)
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	ldw	r4,4(bp)
	addi	r4,r4,8
	ldw	r3,-2(bp)
	ld16	r2, 6
	add	r3,r3,r2
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	ldw	r4,4(bp)
	ld16	r3, 10
	add	r4,r4,r3
	ldw	r3,-2(bp)
	addi	r3,r3,8
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	ld16	r4, 22
	push	r4
	ldw	r4,-2(bp)
	ld16	r3, 10
	add	r4,r4,r3
	push	r4
	ldw	r4,4(bp)
	ld16	r3, 12
	add	r4,r4,r3
	push	r4
	la16	r4,_memmove
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ldw	r4,-4(bp)
	push	r4
	la16	r4,_brelse
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	ldw	r4,4(bp)
	addi	r4,r4,2
	ldw	r3,r0(r4)
	ori	r3,r3,2
	stw	r0(r4),r3
L1_fs8:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _iunlock
_iunlock:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r4,4(bp)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	ld16	r3, 1
	skip.ne	r4,r3
	br	L2_fs8
	la16	r4,L3_fs0_fs
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L2_fs8:
	ldw	r4,4(bp)
	addi	r4,r4,2
	ldw	r3,r0(r4)
	ld16	r2, -2
	and	r3,r3,r2
	stw	r0(r4),r3
L2_fs7:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _iput
_iput:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r4,4(bp)
	ldw	r3,r0(r4)
	subi	r3,r3,1
	stw	r0(r4),r3
L3_fs1_fs:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _bmap
_bmap:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r4,6(bp)
	ld16	r3, 10
	skip.ult	r3,r4
	br	L3_fs3_fs
	la16	r4,L3_fs5_fs
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L3_fs3_fs:
	ldw	r4,6(bp)
	shl	r4, r4, 1 ; [via index]
	ldw	r3,4(bp)
	ld16	r2, 12
	add	r3,r3,r2
	ldw	r4,r4(r3)
	mov	r1,r4
L3_fs2_fs:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _readi
_readi:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	ldw	r4,8(bp)
	shr	r4, r4, 9
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_bmap
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	mov	r4,r1
	stw	-4(bp),r4
	ldw	r4,-4(bp)
	push	r4
	la16	r4,_bread
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	stw	-2(bp),r1
	ldw	r4,10(bp)
	push	r4
	ldw	r4,8(bp)
	ld16	r3, 511
	and	r4,r4,r3
	push	r4
	ldw	r3,-2(bp)
	ld16	r2, 10
	add	r3,r3,r2
	add	r4,r4,r3
	push	r4
	la16	r4,L3_fs7_fs
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
	ldw	r4,10(bp)
	push	r4
	ldw	r4,8(bp)
	ld16	r3, 511
	and	r4,r4,r3
	ldw	r3,-2(bp)
	ld16	r2, 10
	add	r3,r3,r2
	add	r4,r4,r3
	push	r4
	ldw	r4,6(bp)
	push	r4
	la16	r4,_memmove
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_brelse
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	ldw	r4,10(bp)
	mov	r1,r4
L3_fs6_fs:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _dirlookup
_dirlookup:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 18
	sub	sp, sp, r4
	stw	-2(bp),r0
	la16	r4,L4_fs2
	br.r r4
L3_fs9_fs:
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_direntry
	push	r4
	la16	r4,L4_fs3
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ld16	r4, 16
	push	r4
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_direntry
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_readi
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
	ld16	r4, 14
	push	r4
	ldw	r4,6(bp)
	push	r4
	la16	r4,_direntry+2
	push	r4
	la16	r4,_strcmp
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	skip.eq r1,r0
	br L4_fs4
	la16	r4,_direntry
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_iget
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	mov	r4,r1
	la16	r4,L3_fs8_fs
	br.r r4
L4_fs4:
L4_fs0:
	ldw	r4,-2(bp)
	ld16	r3, 16
	add	r4,r4,r3
	stw	-2(bp),r4
L4_fs2:
	ldw	r4,-2(bp)
	ldw	r3,4(bp)
	ld16	r2, 10
	add	r3,r3,r2
	ldw	r3,r0(r3)
	skip.ulte	r3,r4
	br	L3_fs9_fs
	mov	r1,r0
L3_fs8_fs:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _nextelem
_nextelem:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 4
	sub	sp, sp, r4
	la16	r4,L4_fs9
	br.r r4
L4_fs8:
	ldw	r4,4(bp)
	addi	r4,r4,1
	stw	4(bp),r4
L4_fs9:
	ldw	r4,4(bp)
	ldb	r4,r0(r4)
	sext	r4,r4
	ld16	r3, 47
	skip.ne	r4,r3
	br	L4_fs8
	ldw	r4,4(bp)
	ldb	r4,r0(r4)
	sext	r4,r4
	skip.eq r4,r0
	br L5_fs1
	mov	r1,r0
	la16	r4,L4_fs7
	br.r r4
L5_fs1:
	ldw	r4,4(bp)
	stw	-2(bp),r4
	la16	r4,L5_fs4
	br.r r4
L5_fs3:
	ldw	r4,4(bp)
	addi	r4,r4,1
	stw	4(bp),r4
L5_fs4:
	ldw	r4,4(bp)
	ldb	r4,r0(r4)
	sext	r4,r4
	ld16	r3, 47
	skip.ne	r4,r3
	br	L5_fs6
	skip.eq r4,r0
	br L5_fs3
L5_fs6:
	ldw	r4,-2(bp)
	ldw	r3,4(bp)
	mov	r2,r4
	sub	r3,r3,r2
	stw	-4(bp),r3
	ldw	r3,-4(bp)
	push	r3
	push	r4
	ldw	r4,6(bp)
	push	r4
	la16	r4,_memmove
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	ldw	r4,-4(bp)
	ldw	r3,6(bp)
	add	r4,r4,r3
	stb	r0(r4),r0
	ldw	r1,4(bp)
L4_fs7:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _namei
_namei:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 18
	sub	sp, sp, r4
	ldw	r4,4(bp)
	ldb	r4,r0(r4)
	sext	r4,r4
	ld16	r3, 47
	skip.eq r4,r3
	br L5_fs8
	ld16	r4, 1
	push	r4
	la16	r4,_iget
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	stw	-2(bp),r1
	la16	r4,L6_fs1
	br.r r4
L5_fs8:
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 10
	add	r4,r4,r3
	ldw	r4,r0(r4)
	stw	-2(bp),r4
	la16	r4,L6_fs1
	br.r r4
L6_fs0:
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_ilock
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	ldw	r4,-2(bp)
	ld16	r3, 6
	add	r4,r4,r3
	ldw	r4,r0(r4)
	ld16	r3, 1
	skip.ne	r4,r3
	br	L6_fs3
	la16	r4,L6_fs5
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L6_fs3:
	ldi	r4, -18
	add	r4, r4, bp
	push	r4
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_dirlookup
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	stw	-4(bp),r1
	ldw	r4,-4(bp)
	stw	-2(bp),r4
L6_fs1:
	ldi	r4, -18
	add	r4, r4, bp
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_nextelem
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	stw	4(bp),r1
	mov	r4,r1
	skip.eq r4,r0
	br L6_fs0
	ldw	r1,-2(bp)
L5_fs7:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _strcmp
;	.extern _brelse
;	.extern _halt
;	.extern _kprintf
;	.extern _memmove
;	.extern _sdinit
;	.extern _currproc
	.bss
;	.global _direntry
_direntry:
	defs 16
;	.global _icache
_icache:
	defs 340
;	.global _sb
_sb:
	defs 14
;	.extern _loaduvm
;	.extern _bread
;	.extern _binit
	.data
L6_fs5:
	defb 110
	defb 97
	defb 109
	defb 101
	defb 105
	defb 58
	defb 32
	defb 112
	defb 97
	defb 116
	defb 104
	defb 32
	defb 101
	defb 108
	defb 101
	defb 109
	defb 101
	defb 110
	defb 116
	defb 32
	defb 33
	defb 61
	defb 32
	defb 116
	defb 121
	defb 112
	defb 101
	defb 32
	defb 100
	defb 105
	defb 114
	defb 10
	defb 0
L4_fs3:
	defb 100
	defb 105
	defb 114
	defb 108
	defb 111
	defb 111
	defb 107
	defb 117
	defb 112
	defb 58
	defb 32
	defb 37
	defb 120
	defb 44
	defb 32
	defb 111
	defb 102
	defb 102
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L3_fs7_fs:
	defb 114
	defb 101
	defb 97
	defb 100
	defb 105
	defb 58
	defb 32
	defb 102
	defb 114
	defb 111
	defb 109
	defb 32
	defb 37
	defb 120
	defb 32
	defb 102
	defb 111
	defb 114
	defb 32
	defb 37
	defb 120
	defb 40
	defb 37
	defb 120
	defb 41
	defb 32
	defb 98
	defb 121
	defb 116
	defb 101
	defb 115
	defb 10
	defb 0
L3_fs5_fs:
	defb 73
	defb 110
	defb 100
	defb 105
	defb 114
	defb 101
	defb 99
	defb 116
	defb 32
	defb 98
	defb 108
	defb 111
	defb 99
	defb 107
	defb 115
	defb 32
	defb 110
	defb 111
	defb 116
	defb 32
	defb 105
	defb 109
	defb 112
	defb 108
	defb 101
	defb 109
	defb 101
	defb 110
	defb 116
	defb 101
	defb 100
	defb 32
	defb 121
	defb 101
	defb 116
	defb 33
	defb 10
	defb 0
L3_fs0_fs:
	defb 105
	defb 117
	defb 110
	defb 108
	defb 111
	defb 99
	defb 107
	defb 58
	defb 32
	defb 105
	defb 110
	defb 111
	defb 100
	defb 101
	defb 32
	defb 110
	defb 111
	defb 116
	defb 32
	defb 102
	defb 108
	defb 97
	defb 103
	defb 103
	defb 101
	defb 100
	defb 32
	defb 98
	defb 117
	defb 115
	defb 121
	defb 33
	defb 10
	defb 0
L2_fs6:
	defb 105
	defb 108
	defb 111
	defb 99
	defb 107
	defb 58
	defb 32
	defb 100
	defb 105
	defb 112
	defb 58
	defb 32
	defb 37
	defb 120
	defb 32
	defb 43
	defb 32
	defb 37
	defb 120
	defb 32
	defb 61
	defb 32
	defb 37
	defb 120
	defb 0
L2_fs4:
	defb 105
	defb 108
	defb 111
	defb 99
	defb 107
	defb 58
	defb 32
	defb 110
	defb 111
	defb 32
	defb 115
	defb 117
	defb 112
	defb 101
	defb 114
	defb 98
	defb 108
	defb 111
	defb 99
	defb 107
	defb 32
	defb 105
	defb 110
	defb 102
	defb 111
	defb 33
	defb 10
	defb 0
L1_fs7:
	defb 105
	defb 103
	defb 101
	defb 116
	defb 58
	defb 32
	defb 97
	defb 108
	defb 108
	defb 111
	defb 99
	defb 97
	defb 116
	defb 101
	defb 100
	defb 32
	defb 105
	defb 110
	defb 111
	defb 100
	defb 101
	defb 32
	defb 97
	defb 116
	defb 58
	defb 32
	defb 37
	defb 120
	defb 32
	defb 102
	defb 111
	defb 114
	defb 32
	defb 105
	defb 110
	defb 117
	defb 109
	defb 58
	defb 32
	defb 37
	defb 120
	defb 0
L1_fs6:
	defb 105
	defb 103
	defb 101
	defb 116
	defb 58
	defb 32
	defb 110
	defb 111
	defb 32
	defb 102
	defb 114
	defb 101
	defb 101
	defb 32
	defb 105
	defb 110
	defb 111
	defb 100
	defb 101
	defb 32
	defb 105
	defb 110
	defb 32
	defb 105
	defb 99
	defb 97
	defb 99
	defb 104
	defb 101
	defb 33
	defb 10
	defb 0
L3_fs:
	defb 114
	defb 101
	defb 97
	defb 100
	defb 115
	defb 98
	defb 58
	defb 32
	defb 114
	defb 101
	defb 97
	defb 100
	defb 32
	defb 115
	defb 117
	defb 112
	defb 101
	defb 114
	defb 98
	defb 108
	defb 111
	defb 99
	defb 107
	defb 32
	defb 102
	defb 114
	defb 111
	defb 109
	defb 32
	defb 100
	defb 105
	defb 115
	defb 107
	defb 32
	defb 116
	defb 111
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _binit
;	.code
_binit:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	ld16	r4, 2088
	push	r4
	push	r0
	la16	r4,_bcache
	push	r4
	la16	r4,_memset
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	la16	r4,_bcache+1566+4
	la16	r3,_bcache+1566
	stw	r0(r4),r3
	la16	r4,_bcache+1566+6
	la16	r3,_bcache+1566
	stw	r0(r4),r3
	la16	r4,_bcache
	stw	-2(bp),r4
	la16	r4,L12_bio
	br.r r4
L9_bio:
	ldw	r4,-2(bp)
	ld16	r3, 6
	add	r4,r4,r3
	la16	r3,_bcache+1566+6
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	addi	r4,r4,4
	la16	r3,_bcache+1566
	stw	r0(r4),r3
	la16	r4,_bcache+1566+6
	ldw	r4,r0(r4)
	addi	r4,r4,4
	ldw	r3,-2(bp)
	stw	r0(r4),r3
	la16	r4,_bcache+1566+6
	ldw	r3,-2(bp)
	stw	r0(r4),r3
L10_bio:
	ldw	r4,-2(bp)
	ld16	r3, 522
	add	r4,r4,r3
	stw	-2(bp),r4
L12_bio:
	ldw	r4,-2(bp)
	la16	r3,_bcache+1566
	skip.ulte	r3,r4
	br	L9_bio
	la16	r4,_sdqueue
	stw	r0(r4),r0
	la16	r4,L2_bio1
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L2_bio:
	mov	sp, bp
	pop	bp
	pop	pc

_bget:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
L2_bio3:
	ldw	r4,4(bp)
	push	r4
	la16	r4,L2_bio4
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_bcache+1566+6
	ldw	r4,r0(r4)
	stw	-2(bp),r4
	la16	r4,L2_bio8
	br.r r4
L2_bio5:
	ldw	r4,-2(bp)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	ldw	r3,4(bp)
	skip.eq r4,r3
	br L32_bio
	ldw	r4,-2(bp)
	ldw	r4,r0(r4)
	andi	r4,r4,1
	skip.eq r4,r0
	br L34_bio
	ldw	r4,-2(bp)
	ldw	r3,r0(r4)
	ori	r3,r3,1
	stw	r0(r4),r3
	ldw	r1,-2(bp)
	la16	r4,L2_bio2
	br.r r4
L34_bio:
	ldw	r4,-2(bp)
	push	r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,L36_bio
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	la16	r4,L37_bio
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
	la16	r4,L2_bio3
	br.r r4
L32_bio:
L2_bio6:
	ldw	r4,-2(bp)
	ld16	r3, 6
	add	r4,r4,r3
	ldw	r4,r0(r4)
	stw	-2(bp),r4
L2_bio8:
	ldw	r4,-2(bp)
	la16	r3,_bcache+1566
	skip.eq r4,r3
	br L2_bio5
	la16	r4,_bcache+1566+4
	ldw	r4,r0(r4)
	stw	-2(bp),r4
	la16	r4,L41_bio
	br.r r4
L38_bio:
	ldw	r4,-2(bp)
	ldw	r4,r0(r4)
	andi	r2,r4,1
	skip.eq r2,r0
	br L45_bio
	andi	r4,r4,4
	skip.eq r4,r0
	br L45_bio
	ldw	r4,-2(bp)
	addi	r4,r4,2
	ldw	r3,4(bp)
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	ld16	r3, 1
	stw	r0(r4),r3
	ldw	r4,-2(bp)
	push	r4
	la16	r4,L47_bio
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r1,-2(bp)
	la16	r4,L2_bio2
	br.r r4
L45_bio:
L39_bio:
	ldw	r4,-2(bp)
	addi	r4,r4,4
	ldw	r4,r0(r4)
	stw	-2(bp),r4
L41_bio:
	ldw	r4,-2(bp)
	la16	r3,_bcache+1566
	skip.eq r4,r3
	br L38_bio
	la16	r4,L48_bio
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
	mov	r1,r0
L2_bio2:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _bread
_bread:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_bget
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	stw	-2(bp),r1
	ldw	r4,-2(bp)
	ldw	r4,r0(r4)
	andi	r4,r4,2
	skip.eq r4,r0
	br L50_bio
	ldw	r4,-2(bp)
	push	r4
	la16	r4,_sdrw
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L50_bio:
	ldw	r1,-2(bp)
L49_bio:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _bwrite
_bwrite:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r4,4(bp)
	ldw	r4,r0(r4)
	andi	r4,r4,1
	skip.eq r4,r0
	br L53_bio
	ldw	r4,4(bp)
	ldw	r3,r0(r4)
	ori	r3,r3,4
	stw	r0(r4),r3
L53_bio:
L52_bio:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _brelse
_brelse:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r4,4(bp)
	ldw	r4,r0(r4)
	andi	r4,r4,1
	skip.eq r4,r0
	br L56_bio
	ldw	r4,4(bp)
	ld16	r3, 4
	ld16	r2, 6
	add	r2,r4,r2
	ldw	r2,r0(r2)
	add	r2,r2,r3
	add	r4,r4,r3
	ldw	r4,r0(r4)
	stw	r0(r2),r4
L56_bio:
	ldw	r4,4(bp)
	ld16	r3, 6
	addi	r2,r4,4
	ldw	r2,r0(r2)
	add	r2,r2,r3
	add	r4,r4,r3
	ldw	r4,r0(r4)
	stw	r0(r2),r4
	ldw	r4,4(bp)
	ld16	r3, 6
	add	r4,r4,r3
	la16	r3,_bcache+1566+6
	ldw	r3,r0(r3)
	stw	r0(r4),r3
	ldw	r4,4(bp)
	addi	r4,r4,4
	la16	r3,_bcache+1566
	stw	r0(r4),r3
	la16	r4,_bcache+1566+6
	ldw	r4,r0(r4)
	addi	r4,r4,4
	ldw	r3,4(bp)
	stw	r0(r4),r3
	la16	r4,_bcache+1566+6
	ldw	r3,4(bp)
	stw	r0(r4),r3
	ldw	r4,4(bp)
	ldw	r3,r0(r4)
	andi	r3,r3,-2
	stw	r0(r4),r3
L55_bio:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _sdrw
;	.extern _halt
;	.extern _kprintf
;	.extern _memset
;	.extern _sdqueue
	.bss
;	.global _bcache
_bcache:
	defs 2088
	.data
L48_bio:
	defb 98
	defb 103
	defb 101
	defb 116
	defb 58
	defb 32
	defb 110
	defb 111
	defb 32
	defb 98
	defb 117
	defb 102
	defb 102
	defb 101
	defb 114
	defb 115
	defb 0
L47_bio:
	defb 98
	defb 103
	defb 101
	defb 116
	defb 58
	defb 32
	defb 97
	defb 108
	defb 108
	defb 111
	defb 99
	defb 97
	defb 116
	defb 105
	defb 110
	defb 103
	defb 32
	defb 110
	defb 101
	defb 119
	defb 32
	defb 98
	defb 117
	defb 102
	defb 102
	defb 101
	defb 114
	defb 32
	defb 97
	defb 116
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L37_bio:
	defb 115
	defb 108
	defb 101
	defb 101
	defb 112
	defb 40
	defb 98
	defb 44
	defb 32
	defb 38
	defb 98
	defb 99
	defb 97
	defb 99
	defb 104
	defb 101
	defb 46
	defb 108
	defb 111
	defb 99
	defb 107
	defb 41
	defb 10
	defb 0
L36_bio:
	defb 98
	defb 103
	defb 101
	defb 116
	defb 58
	defb 32
	defb 102
	defb 111
	defb 117
	defb 110
	defb 100
	defb 32
	defb 98
	defb 108
	defb 111
	defb 99
	defb 107
	defb 32
	defb 119
	defb 105
	defb 116
	defb 104
	defb 32
	defb 98
	defb 108
	defb 111
	defb 99
	defb 107
	defb 110
	defb 111
	defb 58
	defb 32
	defb 37
	defb 120
	defb 32
	defb 97
	defb 116
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L2_bio4:
	defb 98
	defb 103
	defb 101
	defb 116
	defb 58
	defb 32
	defb 108
	defb 111
	defb 111
	defb 107
	defb 105
	defb 110
	defb 103
	defb 32
	defb 102
	defb 111
	defb 114
	defb 32
	defb 98
	defb 117
	defb 102
	defb 32
	defb 119
	defb 105
	defb 116
	defb 104
	defb 32
	defb 98
	defb 108
	defb 111
	defb 99
	defb 107
	defb 110
	defb 111
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L2_bio1:
	defb 98
	defb 105
	defb 110
	defb 105
	defb 116
	defb 58
	defb 32
	defb 98
	defb 117
	defb 102
	defb 102
	defb 101
	defb 114
	defb 32
	defb 99
	defb 97
	defb 99
	defb 104
	defb 101
	defb 32
	defb 105
	defb 110
	defb 105
	defb 116
	defb 105
	defb 97
	defb 108
	defb 105
	defb 115
	defb 101
	defb 100
	defb 46
	defb 46
	defb 46
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _sdrw
;	.code
_sdrw:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	ldw	r4,4(bp)
	addi	r4,r4,8
	stw	r0(r4),r0
	la16	r4,_sdqueue
	ldw	r4,r0(r4)
	skip.ne	r4,r0
	br	L2_sd
	la16	r4,_sdqueue
	ldw	r4,r0(r4)
	stw	-2(bp),r4
	la16	r4,L7_sd
	br.r r4
L4_sd:
L5_sd:
	ldw	r4,-2(bp)
	addi	r4,r4,8
	ldw	r4,r0(r4)
	stw	-2(bp),r4
L7_sd:
	ldw	r4,-2(bp)
	addi	r4,r4,8
	ldw	r4,r0(r4)
	skip.eq r4,r0
	br L4_sd
	ldw	r4,-2(bp)
	addi	r4,r4,8
	ldw	r3,4(bp)
	stw	r0(r4),r3
	ldw	r4,4(bp)
	push	r4
	la16	r4,L8_sd
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,L3_sd
	br.r r4
L2_sd:
	ldw	r4,4(bp)
	push	r4
	la16	r4,L9_sd
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_sdqueue
	ldw	r3,4(bp)
	stw	r0(r4),r3
	la16	r4,_sdwork
	addi	r1,pc,2
	br.r	r4
L3_sd:
L1_sd:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _sdwork
_sdwork:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	la16	r4,_sdreadcmd
	addi	r1,pc,2
	br.r	r4
	push	r1
	la16	r4,L1_sd1
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_sdreadcmd
	addi	r1,pc,2
	br.r	r4
	ld16	r3, 16384
	and	r4,r1,r3
	skip.eq r4,r3
	br L1_sd2
	la16	r4,L1_sd4
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_sdqueue
	push	r4
	la16	r4,_sleep
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
L1_sd2:
	la16	r4,_sdqueue
	ldw	r4,r0(r4)
	skip.eq r4,r0
	br L1_sd5
	la16	r4,L1_sd0
	br.r r4
L1_sd5:
	la16	r4,_sdqueue
	ldw	r3,r0(r4)
	stw	-2(bp),r3
	ldw	r3,-2(bp)
	addi	r2,r3,8
	ldw	r2,r0(r2)
	stw	r0(r4),r2
	push	r3
	la16	r4,L1_sd7
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_sdqueue
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L1_sd8
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L1_sd9
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	ld16	r3, 10
	add	r3,r4,r3
	push	r3
	addi	r4,r4,2
	ldw	r4,r0(r4)
	push	r4
	la16	r4,_sdreadb
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	ldw	r4,-2(bp)
	ldw	r3,r0(r4)
	ori	r3,r3,2
	stw	r0(r4),r3
L1_sd0:
	mov	sp, bp
	pop	bp
	pop	pc

;	.global _sdirq
_sdirq:
	push	r1
	push	bp
	mov	bp, sp
	ldw	r4,4(bp)
	skip.ne	r4,r0
	br	L2_sd1
	la16	r4,L2_sd3
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_sdreadcmd
	addi	r1,pc,2
	br.r	r4
	ld16	r3, 16384
	and	r4,r1,r3
	skip.eq r4,r3
	br L2_sd4
	la16	r4,L2_sd0
	br.r r4
L2_sd4:
L2_sd1:
	la16	r4,_sdqueue
	push	r4
	la16	r4,_wakeup
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_sdqueue
	ldw	r4,r0(r4)
	skip.ne	r4,r0
	br	L2_sd6
	la16	r4,_sdqueue
	ldw	r4,r0(r4)
	push	r4
	la16	r4,L2_sd8
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,4
	add	sp,sp,r2
	la16	r4,_sdwork
	addi	r1,pc,2
	br.r	r4
L2_sd6:
L2_sd0:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _wakeup
;	.extern _sdreadb
;	.extern _sleep
;	.extern _sdreadcmd
;	.extern _kprintf
	.bss
;	.global _sdqueue
_sdqueue:
	defs 2
	.data
L2_sd8:
	defb 115
	defb 100
	defb 105
	defb 114
	defb 113
	defb 58
	defb 32
	defb 115
	defb 100
	defb 113
	defb 117
	defb 101
	defb 117
	defb 101
	defb 58
	defb 32
	defb 37
	defb 120
	defb 0
L2_sd3:
	defb 115
	defb 100
	defb 105
	defb 114
	defb 113
	defb 58
	defb 32
	defb 102
	defb 111
	defb 114
	defb 99
	defb 101
	defb 100
	defb 32
	defb 100
	defb 105
	defb 115
	defb 107
	defb 32
	defb 105
	defb 114
	defb 113
	defb 10
	defb 0
L1_sd9:
	defb 115
	defb 100
	defb 119
	defb 111
	defb 114
	defb 107
	defb 58
	defb 32
	defb 114
	defb 101
	defb 116
	defb 114
	defb 105
	defb 101
	defb 118
	defb 105
	defb 110
	defb 103
	defb 32
	defb 98
	defb 108
	defb 111
	defb 99
	defb 107
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L1_sd8:
	defb 45
	defb 45
	defb 62
	defb 115
	defb 100
	defb 119
	defb 111
	defb 114
	defb 107
	defb 58
	defb 32
	defb 115
	defb 100
	defb 113
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L1_sd7:
	defb 45
	defb 45
	defb 62
	defb 115
	defb 100
	defb 119
	defb 111
	defb 114
	defb 107
	defb 58
	defb 32
	defb 98
	defb 58
	defb 32
	defb 37
	defb 120
	defb 10
	defb 0
L1_sd4:
	defb 115
	defb 100
	defb 119
	defb 111
	defb 114
	defb 100
	defb 58
	defb 32
	defb 100
	defb 105
	defb 115
	defb 107
	defb 32
	defb 98
	defb 117
	defb 115
	defb 121
	defb 33
	defb 10
	defb 0
L1_sd1:
	defb 115
	defb 100
	defb 119
	defb 111
	defb 114
	defb 107
	defb 58
	defb 32
	defb 99
	defb 109
	defb 100
	defb 58
	defb 32
	defb 37
	defb 120
	defb 0
L9_sd:
	defb 115
	defb 100
	defb 114
	defb 119
	defb 58
	defb 32
	defb 98
	defb 117
	defb 102
	defb 40
	defb 37
	defb 120
	defb 41
	defb 32
	defb 105
	defb 115
	defb 32
	defb 102
	defb 105
	defb 114
	defb 115
	defb 116
	defb 32
	defb 105
	defb 110
	defb 108
	defb 105
	defb 110
	defb 101
	defb 46
	defb 10
	defb 0
L8_sd:
	defb 115
	defb 100
	defb 114
	defb 119
	defb 58
	defb 32
	defb 97
	defb 100
	defb 100
	defb 101
	defb 100
	defb 32
	defb 98
	defb 117
	defb 102
	defb 40
	defb 37
	defb 120
	defb 41
	defb 32
	defb 116
	defb 111
	defb 32
	defb 113
	defb 117
	defb 101
	defb 117
	defb 101
	defb 46
	defb 10
	defb 0
;	.end


;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

;	.global _exec
;	.code
_exec:
	push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 8
	sub	sp, sp, r4
	ldw	r4,4(bp)
	push	r4
	la16	r4,_namei
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	stw	-8(bp),r1
	mov	r4,r1
	skip.eq r4,r0
	br L2_exec
	la16	r4,L4_exec
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L2_exec:
	ldw	r4,-8(bp)
	push	r4
	la16	r4,_ilock
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	ld16	r4, 6
	push	r4
	push	r0
	ldi	r4, -6
	add	r4, r4, bp
	push	r4
	ldw	r4,-8(bp)
	push	r4
	la16	r4,_readi
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
	ldw	r4,-4(bp)
	push	r4
	ldw	r4,-6(bp)
	push	r4
	ldi	r4, -6
	add	r4, r4, bp
	push	r4
	la16	r4,L5_exec
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,8
	add	sp,sp,r2
	ldw	r4,-6(bp)
	ld16	r3, 0xbabe
	skip.ne	r4,r3
	br	L7_exec
	la16	r4,L9_exec
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
L7_exec:
	ldw	r4,-4(bp)
	push	r4
	ld16	r4, 6
	push	r4
	ldw	r4,-8(bp)
	push	r4
	la16	r4,_loaduvm
	addi	r1,pc,2
	br.r	r4
	ldi	r2,6
	add	sp,sp,r2
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 16
	add	r4,r4,r3
	ldw	r4,r0(r4)
	addi	r4,r4,4
	stw	r0(r4),r0
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 16
	add	r4,r4,r3
	ldw	r4,r0(r4)
	stw	r0(r4),r0
	la16	r4,_currproc
	ldw	r4,r0(r4)
	ld16	r3, 16
	add	r4,r4,r3
	ldw	r4,r0(r4)
	addi	r4,r4,2
	ld16	r3, 2047
	stw	r0(r4),r3
	mov	r1,r0
L1_exec:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _readi
;	.extern _halt
;	.extern _kprintf
;	.extern _currproc
;	.extern _loaduvm
;	.extern _dirlookup
;	.extern _namei
;	.extern _nextelem
;	.extern _ilock
;	.extern _iget
;	.extern _fsinit
;	.extern _bread
;	.extern _binit
	.data
L9_exec:
	defb 101
	defb 120
	defb 101
	defb 99
	defb 58
	defb 32
	defb 100
	defb 105
	defb 100
	defb 32
	defb 110
	defb 111
	defb 116
	defb 32
	defb 102
	defb 105
	defb 110
	defb 100
	defb 32
	defb 104
	defb 101
	defb 97
	defb 100
	defb 101
	defb 114
	defb 10
	defb 0
L5_exec:
	defb 101
	defb 120
	defb 101
	defb 99
	defb 58
	defb 32
	defb 104
	defb 101
	defb 97
	defb 100
	defb 101
	defb 114
	defb 32
	defb 108
	defb 111
	defb 99
	defb 32
	defb 40
	defb 37
	defb 120
	defb 41
	defb 44
	defb 32
	defb 109
	defb 97
	defb 103
	defb 105
	defb 99
	defb 32
	defb 40
	defb 37
	defb 120
	defb 41
	defb 44
	defb 32
	defb 115
	defb 105
	defb 122
	defb 101
	defb 40
	defb 37
	defb 120
	defb 41
	defb 0
L4_exec:
	defb 101
	defb 120
	defb 101
	defb 99
	defb 58
	defb 32
	defb 102
	defb 105
	defb 108
	defb 101
	defb 32
	defb 110
	defb 111
	defb 116
	defb 32
	defb 102
	defb 111
	defb 117
	defb 110
	defb 100
	defb 33
	defb 10
	defb 0
;	.end


;	reads a single block identified by blockno
; into buffer pointed to by ptr
; usage: sdreadb(bf.blockno, &bf.data)
_sdreadb:
	push	r1
	push	bp
	mov	bp, sp
	ldw r1, 4(bp) ; blockno
	ldw r2, 6(bp) ; buf ptr
	; set fifo
	la16 r4, 0x0700
	la16	r3, 0xffa6
	stw r0(r3), r4

	la16	r4,0xffa6
	stw	r0(r4),r1

	la16	r4,0xffa2
	la16	r3, 0x8851
	stw	r0(r4),r3

	; FIXME: wait for finish here...
	push r2
	addi r1, pc, 4
	push r1
	br wait_while_busy_sdasm
	pop r2


	;la16 r3, 0xffa0
	;mov bp, r3
	;ldw r1, 8(bp)
	;ldw r2, 10(bp)
	;ldw r3, 8(bp)
	;ldw r4, 10(bp)
	;hlt

	la16 r3, 0xffa8
	la16 r1, 512
	add r4, r2, r1	; when buf ptr reaches this address we are done (512 bytes)

L4_sdasm:
	ldw r1, r0(r3)
	stw r0(r2), r1
	addi r2, r2, 2

	addi r3, r3, 2 ; increment sd fifo addr to low byte
	ldw r1, r0(r3)
	stw r0(r2), r1
	addi r2, r2, 2
	subi r3, r3, 2 ; decrease sd fifo addr to high byte

	skip.gte r2, r4
	br L4_sdasm

L3_sdasm:
	mov	sp, bp
	pop	bp
	pop	pc


_sdreadcmd:
	push	r1
	la16 r2, 0xffa2
	ldw r1, r0(r2)
	pop	pc


; SD initiation sequence
_sdinit:
	push	r1
	push	bp

	; INIT controller
	la16 r3, 0xffa0
	mov bp, r3
	; clear errors
	la16 r1, 0x8000
	stw 2(bp), r1
	addi r4, pc, 4
	push r4
	br wait_while_busy_sdasm

	ldi r1, 9  ; divider
	stw 6(bp), r1 ; save divider in data
	la16 r1, 0x0ff
	stw 2(bp), r1 ; issue SD_SETAUX command

	; Start INIT SDcard

	; CMD0
	ldi r1, 0x40
	stw 2(bp), r1
	addi r4, pc, 4
	push r4
	br wait_while_busy_sdasm

	la16 r1, 0x4000
	stw 4(bp), r1
	stw 6(bp), r0
	la16 r1, 0x41
	stw 2(bp), r1
	addi r4, pc, 4
	push r4
	br wait_while_busy_sdasm

	; CMD8
	la16 r1, 0x1a5
	stw 6(bp), r1
	ldi r1, 0x48
	stw 2(bp), r1
	addi r4, pc, 4
	push r4
	br wait_while_busy_sdasm

; Loop CMD 55 + CMD ACMD41 with HCS 1
get_out_of_idle_sdasm:
	ldi r1, 0x77
	stw 2(bp), r1
	addi r4, pc, 4
	push r4
	br wait_while_busy_sdasm

	la16 r1, 0x4000
	stw 4(bp), r1
	stw 6(bp), r0
	la16 r1, 0x69
	stw 2(bp), r1
	addi r4, pc, 4
	push r4
	br wait_while_busy_sdasm

	ldw r1, 2(bp)
	andi r1, r1, 1
	skip.eq r1, r0
	br get_out_of_idle_sdasm

	pop	bp
	pop	pc

wait_while_busy_sdasm:
	ld16 r1, 0xffa2
	ldw r2, r0(r1)
	la16 r1, 0x4000
	and r2, r1, r2
	skip.eq r1, r2
	pop pc
	br wait_while_busy_sdasm

;	DME assembly file, generated by lcc 4.2

 ; INT_MAX: ffffffff

	.data 0x1000
_path:
	defb 47
	defb 102
	defb 115
	defb 46
	defb 104
	defb 0
;	.global _kmain
;	.code
_kmain:
	push	r1
	push	bp
	mov	bp, sp
	la16	r4,_inituart
	addi	r1,pc,2
	br.r	r4
	la16	r4,L2_kmain
	push	r4
	la16	r4,_kprintf
	addi	r1,pc,2
	br.r	r4
	ldi	r2,2
	add	sp,sp,r2
	la16	r4,_initkmem
	addi	r1,pc,2
	br.r	r4
	la16	r4,_pinit
	addi	r1,pc,2
	br.r	r4
	la16	r4,_fsinit
	addi	r1,pc,2
	br.r	r4
	la16	r4,_userinit
	addi	r1,pc,2
	br.r	r4
	la16	r4,_scheduler
	addi	r1,pc,2
	br.r	r4
	la16	r4,_halt
	addi	r1,pc,2
	br.r	r4
	mov	r1,r0
L1_kmain:
	mov	sp, bp
	pop	bp
	pop	pc

;	.extern _halt
;	.extern _scheduler
;	.extern _userinit
;	.extern _pinit
;	.extern _initkmem
;	.extern _kprintf
;	.extern _inituart
;	.extern _stable
;	.extern _allocproc
;	.extern _loaduvm
;	.extern _dirlookup
;	.extern _namei
;	.extern _nextelem
;	.extern _ilock
;	.extern _iget
;	.extern _fsinit
;	.extern _bread
;	.extern _binit
	.data
L2_kmain:
	defb 68
	defb 77
	defb 69
	defb 32
	defb 79
	defb 83
	defb 32
	defb 115
	defb 116
	defb 97
	defb 114
	defb 116
	defb 105
	defb 110
	defb 103
	defb 46
	defb 46
	defb 46
	defb 10
	defb 0
;	.end


; https://en.wikipedia.org/wiki/Division_algorithm#Integer_division_.28unsigned.29_with_remainder


; DIVIDE -------------------------
_div:
; normal function conventions to keep life simple
; we will not args to locals, since we kow what we are doing (he..)
; N is be in bp+6, D is in bp+4
; create 1 local to hold Q: bp-2
; r1 temp
; r2 cntr
; r3 load/store N/Q/D
; r4 R
	push r1
	push bp
	mov bp, sp
	ldi r2, 16
	mov r4, r0
	stw -2(bp), r0
divL1_pseudo_ops:
	subi r2, r2, 1
	shl r4,r4,1

	ld16 r1, 0xfffe
	and r4, r4, r1

	ldi r1, 1
	shl.r r1, r1, r2
	ldw r3, 6(bp)
	and r1, r3, r1

	shr.r r1, r1, r2
	or r4, r4, r1

	ldw r3, 4(bp)
	skip.ulte r3, r4
	br divL2_pseudo_ops

	sub r4, r4, r3
	ldi r1, 1
	shl.r r1, r1, r2
	ldw r3, -2(bp)
	or r3, r3, r1
	stw -2(bp), r3

divL2_pseudo_ops:
	skip.eq r2, r0
	br divL1_pseudo_ops
	ldw r1, -2(bp)
	mov	sp, bp
	pop	bp
	pop	pc

; MODULO -------------------------
; UNSIGNED
; (same algo as div, just returning remainer)
_mod:
	push r1
	push bp
	mov bp, sp
	ldi r2, 16
	mov r4, r0
	stw -2(bp), r0
modL1_pseudo_ops:
	subi r2, r2, 1
	shl r4,r4,1

	ld16 r1, 0xfffe
	and r4, r4, r1

	ldi r1, 1
	shl.r r1, r1, r2
	ldw r3, 6(bp)
	and r1, r3, r1

	shr.r r1, r1, r2
	or r4, r4, r1

	ldw r3, 4(bp)
	skip.ulte r3, r4
	br modL2_pseudo_ops

	sub r4, r4, r3
	ldi r1, 1
	shl.r r1, r1, r2
	ldw r3, -2(bp)
	or r3, r3, r1
	stw -2(bp), r3

modL2_pseudo_ops:
	skip.eq r2, r0
	br modL1_pseudo_ops
	mov r1, r4 ; transfer result to r1
	mov	sp, bp
	pop	bp
	pop	pc

; MULTIPLY  -------------------------
;
; (unsigned)
_mult:
	pop r2 ; op1
	pop r3 ; op2
	mov r1, r0 ; result reg
; if a > b
	skip.gt r2, r3
	br multL2_pseudo_ops
; switch them
	mov r4, r2
	mov r2, r3
	mov r3, r4

multL2_pseudo_ops:
; while r1 > 1 loop
	ldi r4, 1
	skip.gt r2, r4
	br multL3_pseudo_ops
; check if r1 is even/odd
	andi r4, r2, 1
	skip.eq r4, r0
	add r1, r1, r3
	shr r2, r2, 1
	shl r3, r3, 1
	br multL2_pseudo_ops
multL3_pseudo_ops:
	andi r4, r2, 1
	skip.eq r4, r0
	add r1, r1, r3
	br.r bp

;  Initial process execs /init.
;
; include "syscall.h"
; include "traps.h"
;
;
;  exec(init, argv) = args according to C function call convention (pushed from right to left)
;  FIXME: this will fail once page protection user/system is implemented as the string pointers will point
; 			  into protected memory

_initcodestart:
  la16 r1, L2_initcode
  push r1
	la16 r1, L1_initcode
  push r1
	push r0    ; where caller pc would be
	push r0    ; where bp would be
  ldi r1, 7  ; syscall 7 = exec
	push r1
	syscall
	hlt
	hlt
	hlt

;# for(;;) exit();
;exit:
;  movl $SYS_exit, %eax
;  int $T_SYSCALL
;  jmp exit
;
;# char init[] = "/init\0";
L1_initcode:
 defstr "/init"
;
;# char *argv[] = { init, 0 };
;.p2align 2
;
L2_initcode:
  defw L1_initcode
	defw 0



