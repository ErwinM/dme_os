;	DME assembly file, generated by lcc 4.2


	.data 0x1000
;	.global _x
_x:
defw 0x2
;	.global _y
_y:
defw 0x3
;	.global _main
;	.code
_main:
	la16 r1, 0x2000
  mov sp, r1
  push	r1
	push	bp
	mov	bp, sp
	ldi	r4, 2
	sub	sp, sp, r4
	la16	r4,_x
	ldw	r4,r0(r4)
	la16	r3,_y
	ldw	r3,r0(r3)

push bp
push r4
push r3
addi r1, pc, 4
push r1
br mult
; result should be in r1
pop bp

	stw	-2(bp),r1
	ldw	r1,-2(bp)
L1:
	mov	sp, bp
	pop	bp
	pop	pc

mult:
	pop bp ; return address
	pop r2 ; op1
	pop r3 ; op2
	mov r1, r0 ; result reg
; if a > b
	skip.gt r2, r3
	br L2
; switch them
	mov r4, r2
	mov r2, r3
	mov r3, r4

L2:
; while r1 > 1 loop
	ldi r4, 1
	skip.gt r2, r4
	br L3
; check if r1 is even/odd
	andi r4, r2, 1
	addskpi.nz r4, r4, 1
	add r1, r1, r3
	shr r2, r2, 1
	shl r3, r3, 1
	br L2
L3:
	andi r4, r1, 1
	addskpi.nz r4, r4, 1
	add r1, r1, r3
	br.r bp
